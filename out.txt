['./main.py']
start <function Parser.program at 0x7fb9de1ae6a8>
getsym: varsym var
start <function Parser.block at 0x7fb9de1ae378>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident x
start <function Parser.vardef at 0x7fb9de1ae598>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7fb9de1ae598>
accepting comma == comma
getsym: ident y
start <function Parser.vardef at 0x7fb9de1ae598>
expecting ident
accepting ident == ident
getsym: comma ,
accepting lspar == comma
accepting colon == comma
end <function Parser.vardef at 0x7fb9de1ae598>
accepting comma == comma
getsym: ident squ
start <function Parser.vardef at 0x7fb9de1ae598>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7fb9de1ae598>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident arr
start <function Parser.vardef at 0x7fb9de1ae598>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident char
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7fb9de1ae598>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
accepting constsym == varsym
accepting varsym == varsym
getsym: ident multid
start <function Parser.vardef at 0x7fb9de1ae598>
expecting ident
accepting ident == ident
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: lspar [
accepting lspar == lspar
getsym: number 5
expecting number
accepting number == number
getsym: rspar ]
expecting rspar
accepting rspar == rspar
getsym: colon :
accepting lspar == colon
accepting colon == colon
getsym: ident short
accepting ident == ident
getsym: semicolon ;
end <function Parser.vardef at 0x7fb9de1ae598>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: procsym procedure
accepting constsym == procsym
accepting varsym == procsym
accepting procsym == procsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
expecting semicolon
accepting semicolon == semicolon
getsym: varsym var
start <function Parser.block at 0x7fb9de1ae378>
accepting constsym == varsym
accepting varsym == varsym
getsym: ident test
start <function Parser.vardef at 0x7fb9de1ae598>
expecting ident
accepting ident == ident
getsym: semicolon ;
accepting lspar == semicolon
accepting colon == semicolon
end <function Parser.vardef at 0x7fb9de1ae598>
accepting comma == semicolon
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
accepting constsym == beginsym
accepting varsym == beginsym
accepting procsym == beginsym
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident test
StatList : new 140436271728904
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up test
Looking up test
expecting becomes
accepting becomes == becomes
getsym: number 1234
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271729128 of type <class 'ir.AssignStat'> to 140436271728904
accepting semicolon == semicolon
getsym: ident squ
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up squ
Looking up squ
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: times *
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
getsym: ident x
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271729408 of type <class 'ir.AssignStat'> to 140436271728904
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 140436271728904 : [ 140436271729128 140436271729408 ]
end <function Parser.statement at 0x7fb9de1ae268>
end <function Parser.block at 0x7fb9de1ae378>
expecting semicolon
accepting semicolon == semicolon
getsym: beginsym begin
Looking up square
accepting procsym == beginsym
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident x
StatList : new 140436271729744
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: minus -
start <function Parser.expression at 0x7fb9de1ae048>
getsym: number 1
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271729632 of type <class 'ir.AssignStat'> to 140436271729744
accepting semicolon == semicolon
getsym: read read
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == read
accepting callsym == read
accepting beginsym == read
accepting ifsym == read
accepting whilesym == read
accepting print == read
accepting read == read
getsym: ident x
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271730080 of type <class 'ir.AssignStat'> to 140436271729744
accepting semicolon == semicolon
getsym: ifsym if
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ifsym
accepting callsym == ifsym
accepting beginsym == ifsym
accepting ifsym == ifsym
getsym: ident x
start <function Parser.condition at 0x7fb9de1ae158>
accepting oddsym == ident
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: gtr >
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
getsym: number 100
condition operator gtr number
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: thensym then
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.condition at 0x7fb9de1ae158>
expecting thensym
accepting thensym == thensym
getsym: beginsym begin
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 140436271730472
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: minus -
start <function Parser.expression at 0x7fb9de1ae048>
getsym: ident x
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271729072 of type <class 'ir.PrintStat'> to 140436271730472
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: elsesym else
StatList 140436271730472 : [ 140436271729072 ]
end <function Parser.statement at 0x7fb9de1ae268>
accepting elsesym == elsesym
getsym: beginsym begin
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: print print
StatList : new 140436271729968
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: endsym end
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271730192 of type <class 'ir.PrintStat'> to 140436271729968
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 140436271729968 : [ 140436271730192 ]
end <function Parser.statement at 0x7fb9de1ae268>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271730528 of type <class 'ir.IfStat'> to 140436271729744
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271755504 of type <class 'ir.AssignStat'> to 140436271729744
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7fb9de1ae158>
accepting oddsym == ident
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
getsym: number 10
condition operator leq number
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.condition at 0x7fb9de1ae158>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: callsym call
StatList : new 140436271755896
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == callsym
accepting callsym == callsym
getsym: ident square
expecting ident
accepting ident == ident
getsym: semicolon ;
Looking up square
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271756064 of type <class 'ir.CallStat'> to 140436271755896
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
getsym: number 1
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271756288 of type <class 'ir.AssignStat'> to 140436271755896
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: ident squ
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: endsym end
Looking up squ
Looking up squ
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271756624 of type <class 'ir.PrintStat'> to 140436271755896
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 140436271755896 : [ 140436271756064 140436271756288 140436271756624 ]
end <function Parser.statement at 0x7fb9de1ae268>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271756456 of type <class 'ir.WhileStat'> to 140436271729744
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 101
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271756904 of type <class 'ir.AssignStat'> to 140436271729744
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7fb9de1ae158>
accepting oddsym == ident
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
getsym: number 105
condition operator leq number
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.condition at 0x7fb9de1ae158>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident arr
StatList : new 140436271730584
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
getsym: number 100
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: semicolon ;
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271756120 of type <class 'ir.AssignStat'> to 140436271730584
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: ident arr
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: minus -
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
getsym: number 100
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: rspar ]
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271757128 of type <class 'ir.PrintStat'> to 140436271730584
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
getsym: number 1
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271757464 of type <class 'ir.AssignStat'> to 140436271730584
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: semicolon ;
StatList 140436271730584 : [ 140436271756120 140436271757128 140436271757464 ]
end <function Parser.statement at 0x7fb9de1ae268>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271757632 of type <class 'ir.WhileStat'> to 140436271729744
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271757912 of type <class 'ir.AssignStat'> to 140436271729744
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: number 1
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271758136 of type <class 'ir.AssignStat'> to 140436271729744
accepting semicolon == semicolon
getsym: whilesym while
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident x
start <function Parser.condition at 0x7fb9de1ae158>
accepting oddsym == ident
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: leq <=
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.condition at 0x7fb9de1ae158>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: whilesym while
StatList : new 140436271758360
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == whilesym
accepting callsym == whilesym
accepting beginsym == whilesym
accepting ifsym == whilesym
accepting whilesym == whilesym
getsym: ident y
start <function Parser.condition at 0x7fb9de1ae158>
accepting oddsym == ident
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: leq <=
Looking up y
Looking up y
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
getsym: number 5
condition operator leq number
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: dosym do
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.condition at 0x7fb9de1ae158>
expecting dosym
accepting dosym == dosym
getsym: beginsym begin
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == beginsym
accepting callsym == beginsym
accepting beginsym == beginsym
getsym: ident multid
StatList : new 140436271757520
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
expecting rspar
accepting rspar == rspar
getsym: becomes :=
expecting becomes
accepting becomes == becomes
getsym: ident arr
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: lspar [
Looking up arr
Looking up arr
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271758640 of type <class 'ir.AssignStat'> to 140436271757520
accepting semicolon == semicolon
getsym: print !
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == print
accepting callsym == print
accepting beginsym == print
accepting ifsym == print
accepting whilesym == print
accepting print == print
getsym: ident multid
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: lspar [
Looking up multid
Looking up multid
expecting lspar
accepting lspar == lspar
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: rspar ]
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
expecting rspar
accepting rspar == rspar
getsym: lspar [
expecting lspar
accepting lspar == lspar
getsym: ident y
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: rspar ]
Looking up y
Looking up y
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
expecting rspar
accepting rspar == rspar
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271759256 of type <class 'ir.PrintStat'> to 140436271757520
accepting semicolon == semicolon
getsym: ident x
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up x
Looking up x
expecting becomes
accepting becomes == becomes
getsym: ident x
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: plus +
Looking up x
Looking up x
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
getsym: number 1
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: semicolon ;
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271829288 of type <class 'ir.AssignStat'> to 140436271757520
accepting semicolon == semicolon
getsym: ident y
start <function Parser.statement at 0x7fb9de1ae268>
accepting ident == ident
getsym: becomes :=
Looking up y
Looking up y
expecting becomes
accepting becomes == becomes
getsym: ident y
start <function Parser.expression at 0x7fb9de1ae048>
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == ident
getsym: plus +
Looking up y
Looking up y
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
getsym: number 1
start <function Parser.term at 0x7fb9de1b9ea0>
start <function Parser.factor at 0x7fb9de1b9d90>
accepting ident == number
accepting number == number
getsym: endsym end
end <function Parser.factor at 0x7fb9de1b9d90>
end <function Parser.term at 0x7fb9de1b9ea0>
end <function Parser.expression at 0x7fb9de1ae048>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271829624 of type <class 'ir.AssignStat'> to 140436271757520
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 140436271757520 : [ 140436271758640 140436271759256 140436271829288 140436271829624 ]
end <function Parser.statement at 0x7fb9de1ae268>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271829792 of type <class 'ir.WhileStat'> to 140436271758360
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: endsym end
StatList 140436271758360 : [ 140436271829792 ]
end <function Parser.statement at 0x7fb9de1ae268>
end <function Parser.statement at 0x7fb9de1ae268>
StatList: appending 140436271829960 of type <class 'ir.WhileStat'> to 140436271729744
accepting semicolon == endsym
expecting endsym
accepting endsym == endsym
getsym: period .
StatList 140436271729744 : [ 140436271729632 140436271730080 140436271730528 140436271755504 140436271756456 140436271756904 140436271757632 140436271757912 140436271758136 140436271829960 ]
end <function Parser.statement at 0x7fb9de1ae268>
end <function Parser.block at 0x7fb9de1ae378>
expecting period
accepting period == period
end <function Parser.program at 0x7fb9de1ae6a8>

 <class 'ir.Block'> 140436271830128 {
                                                                      <<<<<----- BUG? MISSING PARENT
	body: 	<class 'ir.StatList'> 140436271729744 {
	parent = 140436271830128
		children:
		<class 'ir.AssignStat'> 140436271729632 {
		parent = 140436271729744
			expr: 	<class 'ir.UnExpr'> 140436271729856 {
			parent = 140436271729632
				children:
				'minus'
				<class 'ir.Const'> 140436271729800 {
				parent = 140436271729856
					value: 	1
					symbol: 	None
				}
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.AssignStat'> 140436271730080 {
		parent = 140436271729744
			expr: 	<class 'ir.ReadStat'> 140436271730024 {
			parent = 140436271730080
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.IfStat'> 140436271730528 {
		parent = 140436271729744
			thenpart: 	<class 'ir.StatList'> 140436271730472 {
			parent = 140436271730528
				children:
				<class 'ir.PrintStat'> 140436271729072 {
				parent = 140436271730472
					children:
					<class 'ir.UnExpr'> 140436271729464 {
					parent = 140436271729072
						children:
						'minus'
						<class 'ir.Var'> 140436271729184 {
						parent = 140436271729464
							symbol: 	global int x
						}
					}
					expr: 	<class 'ir.UnExpr'> 140436271729464 {
					parent = 140436271729072
						children:
						'minus'
						<class 'ir.Var'> 140436271729184 {
						parent = 140436271729464
							symbol: 	global int x
						}
					}
				}
			}
			elsepart: 	<class 'ir.StatList'> 140436271729968 {
			parent = 140436271730528
				children:
				<class 'ir.PrintStat'> 140436271730192 {
				parent = 140436271729968
					children:
					<class 'ir.Var'> 140436271730136 {
					parent = 140436271730192
						symbol: 	global int x
					}
					expr: 	<class 'ir.Var'> 140436271730136 {
					parent = 140436271730192
						symbol: 	global int x
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 140436271730304 {
			parent = 140436271730528
				children:
				'gtr'
				<class 'ir.Var'> 140436271730248 {
				parent = 140436271730304
					symbol: 	global int x
				}
				<class 'ir.Const'> 140436271730360 {
				parent = 140436271730304
					value: 	100
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 140436271755504 {
		parent = 140436271729744
			expr: 	<class 'ir.Const'> 140436271755392 {
			parent = 140436271755504
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.WhileStat'> 140436271756456 {
		parent = 140436271729744
			body: 	<class 'ir.StatList'> 140436271755896 {
			parent = 140436271756456
				children:
				<class 'ir.CallStat'> 140436271756064 {
				parent = 140436271755896
					call: 	<class 'ir.CallExpr'> 140436271756008 {
					parent = 140436271756064
						symbol: 	auto function square
					}
				}
				<class 'ir.AssignStat'> 140436271756288 {
				parent = 140436271755896
					expr: 	<class 'ir.BinExpr'> 140436271756176 {
					parent = 140436271756288
						children:
						'plus'
						<class 'ir.Var'> 140436271755840 {
						parent = 140436271756176
							symbol: 	global int x
						}
						<class 'ir.Const'> 140436271756232 {
						parent = 140436271756176
							value: 	1
							symbol: 	None
						}
					}
					offset: 	None
					symbol: 	global int x
				}
				<class 'ir.PrintStat'> 140436271756624 {
				parent = 140436271755896
					children:
					<class 'ir.Var'> 140436271756512 {
					parent = 140436271756624
						symbol: 	global int squ
					}
					expr: 	<class 'ir.Var'> 140436271756512 {
					parent = 140436271756624
						symbol: 	global int squ
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 140436271755728 {
			parent = 140436271756456
				children:
				'leq'
				<class 'ir.Var'> 140436271755616 {
				parent = 140436271755728
					symbol: 	global int x
				}
				<class 'ir.Const'> 140436271755672 {
				parent = 140436271755728
					value: 	10
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 140436271756904 {
		parent = 140436271729744
			expr: 	<class 'ir.Const'> 140436271756848 {
			parent = 140436271756904
				value: 	101
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.WhileStat'> 140436271757632 {
		parent = 140436271729744
			body: 	<class 'ir.StatList'> 140436271730584 {
			parent = 140436271757632
				children:
				<class 'ir.AssignStat'> 140436271756120 {
				parent = 140436271730584
					expr: 	<class 'ir.Var'> 140436271755952 {
					parent = 140436271756120
						symbol: 	global int x
					}
					offset: 	<class 'ir.BinExpr'> 140436271755560 {
					parent = 140436271756120
						children:
						'times'
						<class 'ir.BinExpr'> 140436271755448 {
						parent = 140436271755560
							children:
							'minus'
							<class 'ir.Var'> 140436271730640 {
							parent = 140436271755448
								symbol: 	global int x
							}
							<class 'ir.Const'> 140436271755336 {
							parent = 140436271755448
								value: 	100
								symbol: 	None
							}
						}
						<class 'ir.Const'> 140436271755784 {
						parent = 140436271755560
							value: 	1
							symbol: 	None
						}
					}
					symbol: 	global char[5] arr
				}
				<class 'ir.PrintStat'> 140436271757128 {
				parent = 140436271730584
					children:
					<class 'ir.ArrayElement'> 140436271756736 {
					parent = 140436271757128
						children:
						<class 'ir.BinExpr'> 140436271756960 {
						parent = 140436271756736
							children:
							'times'
							<class 'ir.BinExpr'> 140436271756792 {
							parent = 140436271756960
								children:
								'minus'
								<class 'ir.Var'> 140436271756568 {
								parent = 140436271756792
									symbol: 	global int x
								}
								<class 'ir.Const'> 140436271756680 {
								parent = 140436271756792
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 140436271757016 {
							parent = 140436271756960
								value: 	1
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 140436271756960 {
						parent = 140436271756736
							children:
							'times'
							<class 'ir.BinExpr'> 140436271756792 {
							parent = 140436271756960
								children:
								'minus'
								<class 'ir.Var'> 140436271756568 {
								parent = 140436271756792
									symbol: 	global int x
								}
								<class 'ir.Const'> 140436271756680 {
								parent = 140436271756792
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 140436271757016 {
							parent = 140436271756960
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
					}
					expr: 	<class 'ir.ArrayElement'> 140436271756736 {
					parent = 140436271757128
						children:
						<class 'ir.BinExpr'> 140436271756960 {
						parent = 140436271756736
							children:
							'times'
							<class 'ir.BinExpr'> 140436271756792 {
							parent = 140436271756960
								children:
								'minus'
								<class 'ir.Var'> 140436271756568 {
								parent = 140436271756792
									symbol: 	global int x
								}
								<class 'ir.Const'> 140436271756680 {
								parent = 140436271756792
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 140436271757016 {
							parent = 140436271756960
								value: 	1
								symbol: 	None
							}
						}
						offset: 	<class 'ir.BinExpr'> 140436271756960 {
						parent = 140436271756736
							children:
							'times'
							<class 'ir.BinExpr'> 140436271756792 {
							parent = 140436271756960
								children:
								'minus'
								<class 'ir.Var'> 140436271756568 {
								parent = 140436271756792
									symbol: 	global int x
								}
								<class 'ir.Const'> 140436271756680 {
								parent = 140436271756792
									value: 	100
									symbol: 	None
								}
							}
							<class 'ir.Const'> 140436271757016 {
							parent = 140436271756960
								value: 	1
								symbol: 	None
							}
						}
						symbol: 	global char[5] arr
					}
				}
				<class 'ir.AssignStat'> 140436271757464 {
				parent = 140436271730584
					expr: 	<class 'ir.BinExpr'> 140436271757352 {
					parent = 140436271757464
						children:
						'plus'
						<class 'ir.Var'> 140436271757296 {
						parent = 140436271757352
							symbol: 	global int x
						}
						<class 'ir.Const'> 140436271757408 {
						parent = 140436271757352
							value: 	1
							symbol: 	None
						}
					}
					offset: 	None
					symbol: 	global int x
				}
			}
			cond: 	<class 'ir.BinExpr'> 140436271729912 {
			parent = 140436271757632
				children:
				'leq'
				<class 'ir.Var'> 140436271757072 {
				parent = 140436271729912
					symbol: 	global int x
				}
				<class 'ir.Const'> 140436271729520 {
				parent = 140436271729912
					value: 	105
					symbol: 	None
				}
			}
		}
		<class 'ir.AssignStat'> 140436271757912 {
		parent = 140436271729744
			expr: 	<class 'ir.Const'> 140436271757800 {
			parent = 140436271757912
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int x
		}
		<class 'ir.AssignStat'> 140436271758136 {
		parent = 140436271729744
			expr: 	<class 'ir.Const'> 140436271758024 {
			parent = 140436271758136
				value: 	1
				symbol: 	None
			}
			offset: 	None
			symbol: 	global int y
		}
		<class 'ir.WhileStat'> 140436271829960 {
		parent = 140436271729744
			body: 	<class 'ir.StatList'> 140436271758360 {
			parent = 140436271829960
				children:
				<class 'ir.WhileStat'> 140436271829792 {
				parent = 140436271758360
					body: 	<class 'ir.StatList'> 140436271757520 {
					parent = 140436271829792
						children:
						<class 'ir.AssignStat'> 140436271758640 {
						parent = 140436271757520
							expr: 	<class 'ir.ArrayElement'> 140436271758528 {
							parent = 140436271758640
								children:
								<class 'ir.BinExpr'> 140436271758304 {
								parent = 140436271758528
									children:
									'times'
									<class 'ir.Var'> 140436271758192 {
									parent = 140436271758304
										symbol: 	global int x
									}
									<class 'ir.Const'> 140436271758584 {
									parent = 140436271758304
										value: 	1
										symbol: 	None
									}
								}
								offset: 	<class 'ir.BinExpr'> 140436271758304 {
								parent = 140436271758528
									children:
									'times'
									<class 'ir.Var'> 140436271758192 {
									parent = 140436271758304
										symbol: 	global int x
									}
									<class 'ir.Const'> 140436271758584 {
									parent = 140436271758304
										value: 	1
										symbol: 	None
									}
								}
								symbol: 	global char[5] arr
							}
							offset: 	<class 'ir.BinExpr'> 140436271758080 {
							parent = 140436271758640
								children:
								'plus'
								<class 'ir.BinExpr'> 140436271757688 {
								parent = 140436271758080
									children:
									'times'
									<class 'ir.Var'> 140436271756400 {
									parent = 140436271757688
										symbol: 	global int x
									}
									<class 'ir.Const'> 140436271757744 {
									parent = 140436271757688
										value: 	10
										symbol: 	None
									}
								}
								<class 'ir.BinExpr'> 140436271757968 {
								parent = 140436271758080
									children:
									'times'
									<class 'ir.Var'> 140436271757576 {
									parent = 140436271757968
										symbol: 	global int y
									}
									<class 'ir.Const'> 140436271757856 {
									parent = 140436271757968
										value: 	2
										symbol: 	None
									}
								}
							}
							symbol: 	global short[5, 5] multid
						}
						<class 'ir.PrintStat'> 140436271759256 {
						parent = 140436271757520
							children:
							<class 'ir.ArrayElement'> 140436271759200 {
							parent = 140436271759256
								children:
								<class 'ir.BinExpr'> 140436271759144 {
								parent = 140436271759200
									children:
									'plus'
									<class 'ir.BinExpr'> 140436271759032 {
									parent = 140436271759144
										children:
										'times'
										<class 'ir.Var'> 140436271758808 {
										parent = 140436271759032
											symbol: 	global int x
										}
										<class 'ir.Const'> 140436271758920 {
										parent = 140436271759032
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 140436271759088 {
									parent = 140436271759144
										children:
										'times'
										<class 'ir.Var'> 140436271758864 {
										parent = 140436271759088
											symbol: 	global int y
										}
										<class 'ir.Const'> 140436271758976 {
										parent = 140436271759088
											value: 	2
											symbol: 	None
										}
									}
								}
								offset: 	<class 'ir.BinExpr'> 140436271759144 {
								parent = 140436271759200
									children:
									'plus'
									<class 'ir.BinExpr'> 140436271759032 {
									parent = 140436271759144
										children:
										'times'
										<class 'ir.Var'> 140436271758808 {
										parent = 140436271759032
											symbol: 	global int x
										}
										<class 'ir.Const'> 140436271758920 {
										parent = 140436271759032
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 140436271759088 {
									parent = 140436271759144
										children:
										'times'
										<class 'ir.Var'> 140436271758864 {
										parent = 140436271759088
											symbol: 	global int y
										}
										<class 'ir.Const'> 140436271758976 {
										parent = 140436271759088
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
							}
							expr: 	<class 'ir.ArrayElement'> 140436271759200 {
							parent = 140436271759256
								children:
								<class 'ir.BinExpr'> 140436271759144 {
								parent = 140436271759200
									children:
									'plus'
									<class 'ir.BinExpr'> 140436271759032 {
									parent = 140436271759144
										children:
										'times'
										<class 'ir.Var'> 140436271758808 {
										parent = 140436271759032
											symbol: 	global int x
										}
										<class 'ir.Const'> 140436271758920 {
										parent = 140436271759032
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 140436271759088 {
									parent = 140436271759144
										children:
										'times'
										<class 'ir.Var'> 140436271758864 {
										parent = 140436271759088
											symbol: 	global int y
										}
										<class 'ir.Const'> 140436271758976 {
										parent = 140436271759088
											value: 	2
											symbol: 	None
										}
									}
								}
								offset: 	<class 'ir.BinExpr'> 140436271759144 {
								parent = 140436271759200
									children:
									'plus'
									<class 'ir.BinExpr'> 140436271759032 {
									parent = 140436271759144
										children:
										'times'
										<class 'ir.Var'> 140436271758808 {
										parent = 140436271759032
											symbol: 	global int x
										}
										<class 'ir.Const'> 140436271758920 {
										parent = 140436271759032
											value: 	10
											symbol: 	None
										}
									}
									<class 'ir.BinExpr'> 140436271759088 {
									parent = 140436271759144
										children:
										'times'
										<class 'ir.Var'> 140436271758864 {
										parent = 140436271759088
											symbol: 	global int y
										}
										<class 'ir.Const'> 140436271758976 {
										parent = 140436271759088
											value: 	2
											symbol: 	None
										}
									}
								}
								symbol: 	global short[5, 5] multid
							}
						}
						<class 'ir.AssignStat'> 140436271829288 {
						parent = 140436271757520
							expr: 	<class 'ir.BinExpr'> 140436271829176 {
							parent = 140436271829288
								children:
								'plus'
								<class 'ir.Var'> 140436271829120 {
								parent = 140436271829176
									symbol: 	global int x
								}
								<class 'ir.Const'> 140436271829232 {
								parent = 140436271829176
									value: 	1
									symbol: 	None
								}
							}
							offset: 	None
							symbol: 	global int x
						}
						<class 'ir.AssignStat'> 140436271829624 {
						parent = 140436271757520
							expr: 	<class 'ir.BinExpr'> 140436271829512 {
							parent = 140436271829624
								children:
								'plus'
								<class 'ir.Var'> 140436271829456 {
								parent = 140436271829512
									symbol: 	global int y
								}
								<class 'ir.Const'> 140436271829568 {
								parent = 140436271829512
									value: 	1
									symbol: 	None
								}
							}
							offset: 	None
							symbol: 	global int y
						}
					}
					cond: 	<class 'ir.BinExpr'> 140436271757240 {
					parent = 140436271829792
						children:
						'leq'
						<class 'ir.Var'> 140436271730416 {
						parent = 140436271757240
							symbol: 	global int y
						}
						<class 'ir.Const'> 140436271757184 {
						parent = 140436271757240
							value: 	5
							symbol: 	None
						}
					}
				}
			}
			cond: 	<class 'ir.BinExpr'> 140436271758472 {
			parent = 140436271829960
				children:
				'leq'
				<class 'ir.Var'> 140436271758248 {
				parent = 140436271758472
					symbol: 	global int x
				}
				<class 'ir.Const'> 140436271758416 {
				parent = 140436271758472
					value: 	5
					symbol: 	None
				}
			}
		}
	}
	global_symtab: 	SymbolTable:
	
	defs: 	<class 'ir.DefinitionList'> 140436272016016 {
	parent = 140436271830128
		children:
		<class 'ir.FunctionDef'> 140436271729688 {
		parent = 140436272016016
			body: 	<class 'ir.Block'> 140436271729576 {
			parent = 140436271729688
				body: 	<class 'ir.StatList'> 140436271728904 {
				parent = 140436271729576
					children:
					<class 'ir.AssignStat'> 140436271729128 {
					parent = 140436271728904
						expr: 	<class 'ir.Const'> 140436271729016 {
						parent = 140436271729128
							value: 	1234
							symbol: 	None
						}
						offset: 	None
						symbol: 	auto int test
					}
					<class 'ir.AssignStat'> 140436271729408 {
					parent = 140436271728904
						expr: 	<class 'ir.BinExpr'> 140436271729296 {
						parent = 140436271729408
							children:
							'times'
							<class 'ir.Var'> 140436271729240 {
							parent = 140436271729296
								symbol: 	global int x
							}
							<class 'ir.Var'> 140436271729352 {
							parent = 140436271729296
								symbol: 	global int x
							}
						}
						offset: 	None
						symbol: 	global int squ
					}
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				auto function square
				
				defs: 	<class 'ir.DefinitionList'> 140436271728848 {
				parent = 140436271729576
				}
			}
			symbol: 	auto function square
		}
	}
} 

navigating children of <class 'ir.StatList'> 140436271729744 10
navigating children of <class 'ir.UnExpr'> 140436271729856 2
<class 'ir.Const'> 140436271729800
<class 'ir.UnExpr'> 140436271729856
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729632
<class 'ir.AssignStat'> 140436271729632
<class 'ir.ReadStat'> 140436271730024
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271730080
<class 'ir.AssignStat'> 140436271730080
navigating children of <class 'ir.StatList'> 140436271730472 1
navigating children of <class 'ir.PrintStat'> 140436271729072 1
navigating children of <class 'ir.UnExpr'> 140436271729464 2
<class 'ir.Var'> 140436271729184
<class 'ir.UnExpr'> 140436271729464
navigating children of <class 'ir.UnExpr'> 140436271729464 2
<class 'ir.Var'> 140436271729184
<class 'ir.UnExpr'> 140436271729464
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271729072
<class 'ir.PrintStat'> 140436271729072
<class 'ir.StatList'> 140436271730472
StatList 140436271730472 : [ 140436271729072 ]
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 140436271730528
navigating children of <class 'ir.StatList'> 140436271729968 1
navigating children of <class 'ir.PrintStat'> 140436271730192 1
<class 'ir.Var'> 140436271730136
<class 'ir.Var'> 140436271730136
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271730192
<class 'ir.PrintStat'> 140436271730192
<class 'ir.StatList'> 140436271729968
StatList 140436271729968 : [ 140436271730192 ]
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 140436271730528
navigating children of <class 'ir.BinExpr'> 140436271730304 3
<class 'ir.Var'> 140436271730248
<class 'ir.Const'> 140436271730360
<class 'ir.BinExpr'> 140436271730304
successfully navigated attr  cond  of <class 'ir.IfStat'> 140436271730528
<class 'ir.IfStat'> 140436271730528
<class 'ir.Const'> 140436271755392
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271755504
<class 'ir.AssignStat'> 140436271755504
navigating children of <class 'ir.StatList'> 140436271755896 3
<class 'ir.CallExpr'> 140436271756008
successfully navigated attr  call  of <class 'ir.CallStat'> 140436271756064
<class 'ir.CallStat'> 140436271756064
navigating children of <class 'ir.BinExpr'> 140436271756176 3
<class 'ir.Var'> 140436271755840
<class 'ir.Const'> 140436271756232
<class 'ir.BinExpr'> 140436271756176
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756288
<class 'ir.AssignStat'> 140436271756288
navigating children of <class 'ir.PrintStat'> 140436271756624 1
<class 'ir.Var'> 140436271756512
<class 'ir.Var'> 140436271756512
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271756624
<class 'ir.PrintStat'> 140436271756624
<class 'ir.StatList'> 140436271755896
StatList 140436271755896 : [ 140436271756064 140436271756288 140436271756624 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271756456
navigating children of <class 'ir.BinExpr'> 140436271755728 3
<class 'ir.Var'> 140436271755616
<class 'ir.Const'> 140436271755672
<class 'ir.BinExpr'> 140436271755728
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271756456
<class 'ir.WhileStat'> 140436271756456
<class 'ir.Const'> 140436271756848
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756904
<class 'ir.AssignStat'> 140436271756904
navigating children of <class 'ir.StatList'> 140436271730584 3
<class 'ir.Var'> 140436271755952
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756120
navigating children of <class 'ir.BinExpr'> 140436271755560 3
navigating children of <class 'ir.BinExpr'> 140436271755448 3
<class 'ir.Var'> 140436271730640
<class 'ir.Const'> 140436271755336
<class 'ir.BinExpr'> 140436271755448
<class 'ir.Const'> 140436271755784
<class 'ir.BinExpr'> 140436271755560
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140436271756120
<class 'ir.AssignStat'> 140436271756120
navigating children of <class 'ir.PrintStat'> 140436271757128 1
navigating children of <class 'ir.ArrayElement'> 140436271756736 1
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
<class 'ir.Var'> 140436271756568
<class 'ir.Const'> 140436271756680
<class 'ir.BinExpr'> 140436271756792
<class 'ir.Const'> 140436271757016
<class 'ir.BinExpr'> 140436271756960
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
<class 'ir.Var'> 140436271756568
<class 'ir.Const'> 140436271756680
<class 'ir.BinExpr'> 140436271756792
<class 'ir.Const'> 140436271757016
<class 'ir.BinExpr'> 140436271756960
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271756736
<class 'ir.ArrayElement'> 140436271756736
navigating children of <class 'ir.ArrayElement'> 140436271756736 1
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
<class 'ir.Var'> 140436271756568
<class 'ir.Const'> 140436271756680
<class 'ir.BinExpr'> 140436271756792
<class 'ir.Const'> 140436271757016
<class 'ir.BinExpr'> 140436271756960
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
<class 'ir.Var'> 140436271756568
<class 'ir.Const'> 140436271756680
<class 'ir.BinExpr'> 140436271756792
<class 'ir.Const'> 140436271757016
<class 'ir.BinExpr'> 140436271756960
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271756736
<class 'ir.ArrayElement'> 140436271756736
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271757128
<class 'ir.PrintStat'> 140436271757128
navigating children of <class 'ir.BinExpr'> 140436271757352 3
<class 'ir.Var'> 140436271757296
<class 'ir.Const'> 140436271757408
<class 'ir.BinExpr'> 140436271757352
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271757464
<class 'ir.AssignStat'> 140436271757464
<class 'ir.StatList'> 140436271730584
StatList 140436271730584 : [ 140436271756120 140436271757128 140436271757464 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271757632
navigating children of <class 'ir.BinExpr'> 140436271729912 3
<class 'ir.Var'> 140436271757072
<class 'ir.Const'> 140436271729520
<class 'ir.BinExpr'> 140436271729912
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271757632
<class 'ir.WhileStat'> 140436271757632
<class 'ir.Const'> 140436271757800
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271757912
<class 'ir.AssignStat'> 140436271757912
<class 'ir.Const'> 140436271758024
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271758136
<class 'ir.AssignStat'> 140436271758136
navigating children of <class 'ir.StatList'> 140436271758360 1
navigating children of <class 'ir.StatList'> 140436271757520 4
navigating children of <class 'ir.ArrayElement'> 140436271758528 1
navigating children of <class 'ir.BinExpr'> 140436271758304 3
<class 'ir.Var'> 140436271758192
<class 'ir.Const'> 140436271758584
<class 'ir.BinExpr'> 140436271758304
navigating children of <class 'ir.BinExpr'> 140436271758304 3
<class 'ir.Var'> 140436271758192
<class 'ir.Const'> 140436271758584
<class 'ir.BinExpr'> 140436271758304
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271758528
<class 'ir.ArrayElement'> 140436271758528
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271758640
navigating children of <class 'ir.BinExpr'> 140436271758080 3
navigating children of <class 'ir.BinExpr'> 140436271757688 3
<class 'ir.Var'> 140436271756400
<class 'ir.Const'> 140436271757744
<class 'ir.BinExpr'> 140436271757688
navigating children of <class 'ir.BinExpr'> 140436271757968 3
<class 'ir.Var'> 140436271757576
<class 'ir.Const'> 140436271757856
<class 'ir.BinExpr'> 140436271757968
<class 'ir.BinExpr'> 140436271758080
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140436271758640
<class 'ir.AssignStat'> 140436271758640
navigating children of <class 'ir.PrintStat'> 140436271759256 1
navigating children of <class 'ir.ArrayElement'> 140436271759200 1
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
<class 'ir.Var'> 140436271758808
<class 'ir.Const'> 140436271758920
<class 'ir.BinExpr'> 140436271759032
navigating children of <class 'ir.BinExpr'> 140436271759088 3
<class 'ir.Var'> 140436271758864
<class 'ir.Const'> 140436271758976
<class 'ir.BinExpr'> 140436271759088
<class 'ir.BinExpr'> 140436271759144
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
<class 'ir.Var'> 140436271758808
<class 'ir.Const'> 140436271758920
<class 'ir.BinExpr'> 140436271759032
navigating children of <class 'ir.BinExpr'> 140436271759088 3
<class 'ir.Var'> 140436271758864
<class 'ir.Const'> 140436271758976
<class 'ir.BinExpr'> 140436271759088
<class 'ir.BinExpr'> 140436271759144
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271759200
<class 'ir.ArrayElement'> 140436271759200
navigating children of <class 'ir.ArrayElement'> 140436271759200 1
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
<class 'ir.Var'> 140436271758808
<class 'ir.Const'> 140436271758920
<class 'ir.BinExpr'> 140436271759032
navigating children of <class 'ir.BinExpr'> 140436271759088 3
<class 'ir.Var'> 140436271758864
<class 'ir.Const'> 140436271758976
<class 'ir.BinExpr'> 140436271759088
<class 'ir.BinExpr'> 140436271759144
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
<class 'ir.Var'> 140436271758808
<class 'ir.Const'> 140436271758920
<class 'ir.BinExpr'> 140436271759032
navigating children of <class 'ir.BinExpr'> 140436271759088 3
<class 'ir.Var'> 140436271758864
<class 'ir.Const'> 140436271758976
<class 'ir.BinExpr'> 140436271759088
<class 'ir.BinExpr'> 140436271759144
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271759200
<class 'ir.ArrayElement'> 140436271759200
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271759256
<class 'ir.PrintStat'> 140436271759256
navigating children of <class 'ir.BinExpr'> 140436271829176 3
<class 'ir.Var'> 140436271829120
<class 'ir.Const'> 140436271829232
<class 'ir.BinExpr'> 140436271829176
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271829288
<class 'ir.AssignStat'> 140436271829288
navigating children of <class 'ir.BinExpr'> 140436271829512 3
<class 'ir.Var'> 140436271829456
<class 'ir.Const'> 140436271829568
<class 'ir.BinExpr'> 140436271829512
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271829624
<class 'ir.AssignStat'> 140436271829624
<class 'ir.StatList'> 140436271757520
StatList 140436271757520 : [ 140436271758640 140436271759256 140436271829288 140436271829624 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271829792
navigating children of <class 'ir.BinExpr'> 140436271757240 3
<class 'ir.Var'> 140436271730416
<class 'ir.Const'> 140436271757184
<class 'ir.BinExpr'> 140436271757240
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271829792
<class 'ir.WhileStat'> 140436271829792
<class 'ir.StatList'> 140436271758360
StatList 140436271758360 : [ 140436271829792 ]
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271829960
navigating children of <class 'ir.BinExpr'> 140436271758472 3
<class 'ir.Var'> 140436271758248
<class 'ir.Const'> 140436271758416
<class 'ir.BinExpr'> 140436271758472
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271829960
<class 'ir.WhileStat'> 140436271829960
<class 'ir.StatList'> 140436271729744
StatList 140436271729744 : [ 140436271729632 140436271730080 140436271730528 140436271755504 140436271756456 140436271756904 140436271757632 140436271757912 140436271758136 140436271829960 ]
successfully navigated attr  body  of <class 'ir.Block'> 140436271830128
navigating children of <class 'ir.DefinitionList'> 140436272016016 1
navigating children of <class 'ir.StatList'> 140436271728904 2
<class 'ir.Const'> 140436271729016
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729128
<class 'ir.AssignStat'> 140436271729128
navigating children of <class 'ir.BinExpr'> 140436271729296 3
<class 'ir.Var'> 140436271729240
<class 'ir.Var'> 140436271729352
<class 'ir.BinExpr'> 140436271729296
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729408
<class 'ir.AssignStat'> 140436271729408
<class 'ir.StatList'> 140436271728904
StatList 140436271728904 : [ 140436271729128 140436271729408 ]
successfully navigated attr  body  of <class 'ir.Block'> 140436271729576
<class 'ir.DefinitionList'> 140436271728848
successfully navigated attr  defs  of <class 'ir.Block'> 140436271729576
<class 'ir.Block'> 140436271729576
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140436271729688
<class 'ir.FunctionDef'> 140436271729688
<class 'ir.DefinitionList'> 140436272016016
successfully navigated attr  defs  of <class 'ir.Block'> 140436271830128
<class 'ir.Block'> 140436271830128
navigating children of <class 'ir.StatList'> 140436271729744 10
navigating children of <class 'ir.UnExpr'> 140436271729856 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729632
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271730080
navigating children of <class 'ir.StatList'> 140436271730472 1
navigating children of <class 'ir.PrintStat'> 140436271729072 1
navigating children of <class 'ir.UnExpr'> 140436271729464 2
navigating children of <class 'ir.UnExpr'> 140436271729464 2
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271729072
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 140436271730528
navigating children of <class 'ir.StatList'> 140436271729968 1
navigating children of <class 'ir.PrintStat'> 140436271730192 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271730192
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 140436271730528
navigating children of <class 'ir.BinExpr'> 140436271730304 3
successfully navigated attr  cond  of <class 'ir.IfStat'> 140436271730528
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271755504
navigating children of <class 'ir.StatList'> 140436271755896 3
successfully navigated attr  call  of <class 'ir.CallStat'> 140436271756064
navigating children of <class 'ir.BinExpr'> 140436271756176 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756288
navigating children of <class 'ir.PrintStat'> 140436271756624 1
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271756624
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271756456
navigating children of <class 'ir.BinExpr'> 140436271755728 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271756456
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756904
navigating children of <class 'ir.StatList'> 140436271730584 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756120
navigating children of <class 'ir.BinExpr'> 140436271755560 3
navigating children of <class 'ir.BinExpr'> 140436271755448 3
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140436271756120
navigating children of <class 'ir.PrintStat'> 140436271757128 1
navigating children of <class 'ir.ArrayElement'> 140436271756736 1
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271756736
navigating children of <class 'ir.ArrayElement'> 140436271756736 1
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271756736
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271757128
navigating children of <class 'ir.BinExpr'> 140436271757352 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271757464
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271757632
navigating children of <class 'ir.BinExpr'> 140436271729912 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271757632
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271757912
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271758136
navigating children of <class 'ir.StatList'> 140436271758360 1
navigating children of <class 'ir.StatList'> 140436271757520 4
navigating children of <class 'ir.ArrayElement'> 140436271758528 1
navigating children of <class 'ir.BinExpr'> 140436271758304 3
navigating children of <class 'ir.BinExpr'> 140436271758304 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271758528
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271758640
navigating children of <class 'ir.BinExpr'> 140436271758080 3
navigating children of <class 'ir.BinExpr'> 140436271757688 3
navigating children of <class 'ir.BinExpr'> 140436271757968 3
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140436271758640
navigating children of <class 'ir.PrintStat'> 140436271759256 1
navigating children of <class 'ir.ArrayElement'> 140436271759200 1
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
navigating children of <class 'ir.BinExpr'> 140436271759088 3
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
navigating children of <class 'ir.BinExpr'> 140436271759088 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271759200
navigating children of <class 'ir.ArrayElement'> 140436271759200 1
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
navigating children of <class 'ir.BinExpr'> 140436271759088 3
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
navigating children of <class 'ir.BinExpr'> 140436271759088 3
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271759200
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271759256
navigating children of <class 'ir.BinExpr'> 140436271829176 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271829288
navigating children of <class 'ir.BinExpr'> 140436271829512 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271829624
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271829792
navigating children of <class 'ir.BinExpr'> 140436271757240 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271829792
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271829960
navigating children of <class 'ir.BinExpr'> 140436271758472 3
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271829960
successfully navigated attr  body  of <class 'ir.Block'> 140436271830128
navigating children of <class 'ir.DefinitionList'> 140436272016016 1
navigating children of <class 'ir.StatList'> 140436271728904 2
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729128
navigating children of <class 'ir.BinExpr'> 140436271729296 3
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729408
successfully navigated attr  body  of <class 'ir.Block'> 140436271729576
successfully navigated attr  defs  of <class 'ir.Block'> 140436271729576
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140436271729688
successfully navigated attr  defs  of <class 'ir.Block'> 140436271830128
<class 'ir.Const'> 140436271729800 -> <class 'ir.UnExpr'> 140436271729856
<class 'ir.UnExpr'> 140436271729856 -> <class 'ir.AssignStat'> 140436271729632
<class 'ir.AssignStat'> 140436271729632 -> <class 'ir.StatList'> 140436271729744
<class 'ir.ReadStat'> 140436271730024 -> <class 'ir.AssignStat'> 140436271730080
<class 'ir.AssignStat'> 140436271730080 -> <class 'ir.StatList'> 140436271729744
<class 'ir.Var'> 140436271729184 -> <class 'ir.UnExpr'> 140436271729464
<class 'ir.UnExpr'> 140436271729464 -> <class 'ir.PrintStat'> 140436271729072
<class 'ir.PrintStat'> 140436271729072 -> <class 'ir.StatList'> 140436271730472
<class 'ir.StatList'> 140436271730472 -> <class 'ir.IfStat'> 140436271730528
<class 'ir.Var'> 140436271730136 -> <class 'ir.PrintStat'> 140436271730192
<class 'ir.PrintStat'> 140436271730192 -> <class 'ir.StatList'> 140436271729968
<class 'ir.StatList'> 140436271729968 -> <class 'ir.IfStat'> 140436271730528
<class 'ir.Var'> 140436271730248 -> <class 'ir.BinExpr'> 140436271730304
<class 'ir.Const'> 140436271730360 -> <class 'ir.BinExpr'> 140436271730304
<class 'ir.BinExpr'> 140436271730304 -> <class 'ir.IfStat'> 140436271730528
<class 'ir.IfStat'> 140436271730528 -> <class 'ir.StatList'> 140436271729744
<class 'ir.Const'> 140436271755392 -> <class 'ir.AssignStat'> 140436271755504
<class 'ir.AssignStat'> 140436271755504 -> <class 'ir.StatList'> 140436271729744
<class 'ir.CallExpr'> 140436271756008 -> <class 'ir.CallStat'> 140436271756064
<class 'ir.CallStat'> 140436271756064 -> <class 'ir.StatList'> 140436271755896
<class 'ir.Var'> 140436271755840 -> <class 'ir.BinExpr'> 140436271756176
<class 'ir.Const'> 140436271756232 -> <class 'ir.BinExpr'> 140436271756176
<class 'ir.BinExpr'> 140436271756176 -> <class 'ir.AssignStat'> 140436271756288
<class 'ir.AssignStat'> 140436271756288 -> <class 'ir.StatList'> 140436271755896
<class 'ir.Var'> 140436271756512 -> <class 'ir.PrintStat'> 140436271756624
<class 'ir.PrintStat'> 140436271756624 -> <class 'ir.StatList'> 140436271755896
<class 'ir.StatList'> 140436271755896 -> <class 'ir.WhileStat'> 140436271756456
<class 'ir.Var'> 140436271755616 -> <class 'ir.BinExpr'> 140436271755728
<class 'ir.Const'> 140436271755672 -> <class 'ir.BinExpr'> 140436271755728
<class 'ir.BinExpr'> 140436271755728 -> <class 'ir.WhileStat'> 140436271756456
<class 'ir.WhileStat'> 140436271756456 -> <class 'ir.StatList'> 140436271729744
<class 'ir.Const'> 140436271756848 -> <class 'ir.AssignStat'> 140436271756904
<class 'ir.AssignStat'> 140436271756904 -> <class 'ir.StatList'> 140436271729744
<class 'ir.Var'> 140436271755952 -> <class 'ir.AssignStat'> 140436271756120
<class 'ir.Var'> 140436271730640 -> <class 'ir.BinExpr'> 140436271755448
<class 'ir.Const'> 140436271755336 -> <class 'ir.BinExpr'> 140436271755448
<class 'ir.BinExpr'> 140436271755448 -> <class 'ir.BinExpr'> 140436271755560
<class 'ir.Const'> 140436271755784 -> <class 'ir.BinExpr'> 140436271755560
<class 'ir.BinExpr'> 140436271755560 -> <class 'ir.AssignStat'> 140436271756120
<class 'ir.AssignStat'> 140436271756120 -> <class 'ir.StatList'> 140436271730584
<class 'ir.Var'> 140436271756568 -> <class 'ir.BinExpr'> 140436271756792
<class 'ir.Const'> 140436271756680 -> <class 'ir.BinExpr'> 140436271756792
<class 'ir.BinExpr'> 140436271756792 -> <class 'ir.BinExpr'> 140436271756960
<class 'ir.Const'> 140436271757016 -> <class 'ir.BinExpr'> 140436271756960
<class 'ir.BinExpr'> 140436271756960 -> <class 'ir.ArrayElement'> 140436271756736
<class 'ir.ArrayElement'> 140436271756736 -> <class 'ir.PrintStat'> 140436271757128
<class 'ir.PrintStat'> 140436271757128 -> <class 'ir.StatList'> 140436271730584
<class 'ir.Var'> 140436271757296 -> <class 'ir.BinExpr'> 140436271757352
<class 'ir.Const'> 140436271757408 -> <class 'ir.BinExpr'> 140436271757352
<class 'ir.BinExpr'> 140436271757352 -> <class 'ir.AssignStat'> 140436271757464
<class 'ir.AssignStat'> 140436271757464 -> <class 'ir.StatList'> 140436271730584
<class 'ir.StatList'> 140436271730584 -> <class 'ir.WhileStat'> 140436271757632
<class 'ir.Var'> 140436271757072 -> <class 'ir.BinExpr'> 140436271729912
<class 'ir.Const'> 140436271729520 -> <class 'ir.BinExpr'> 140436271729912
<class 'ir.BinExpr'> 140436271729912 -> <class 'ir.WhileStat'> 140436271757632
<class 'ir.WhileStat'> 140436271757632 -> <class 'ir.StatList'> 140436271729744
<class 'ir.Const'> 140436271757800 -> <class 'ir.AssignStat'> 140436271757912
<class 'ir.AssignStat'> 140436271757912 -> <class 'ir.StatList'> 140436271729744
<class 'ir.Const'> 140436271758024 -> <class 'ir.AssignStat'> 140436271758136
<class 'ir.AssignStat'> 140436271758136 -> <class 'ir.StatList'> 140436271729744
<class 'ir.Var'> 140436271758192 -> <class 'ir.BinExpr'> 140436271758304
<class 'ir.Const'> 140436271758584 -> <class 'ir.BinExpr'> 140436271758304
<class 'ir.BinExpr'> 140436271758304 -> <class 'ir.ArrayElement'> 140436271758528
<class 'ir.ArrayElement'> 140436271758528 -> <class 'ir.AssignStat'> 140436271758640
<class 'ir.Var'> 140436271756400 -> <class 'ir.BinExpr'> 140436271757688
<class 'ir.Const'> 140436271757744 -> <class 'ir.BinExpr'> 140436271757688
<class 'ir.BinExpr'> 140436271757688 -> <class 'ir.BinExpr'> 140436271758080
<class 'ir.Var'> 140436271757576 -> <class 'ir.BinExpr'> 140436271757968
<class 'ir.Const'> 140436271757856 -> <class 'ir.BinExpr'> 140436271757968
<class 'ir.BinExpr'> 140436271757968 -> <class 'ir.BinExpr'> 140436271758080
<class 'ir.BinExpr'> 140436271758080 -> <class 'ir.AssignStat'> 140436271758640
<class 'ir.AssignStat'> 140436271758640 -> <class 'ir.StatList'> 140436271757520
<class 'ir.Var'> 140436271758808 -> <class 'ir.BinExpr'> 140436271759032
<class 'ir.Const'> 140436271758920 -> <class 'ir.BinExpr'> 140436271759032
<class 'ir.BinExpr'> 140436271759032 -> <class 'ir.BinExpr'> 140436271759144
<class 'ir.Var'> 140436271758864 -> <class 'ir.BinExpr'> 140436271759088
<class 'ir.Const'> 140436271758976 -> <class 'ir.BinExpr'> 140436271759088
<class 'ir.BinExpr'> 140436271759088 -> <class 'ir.BinExpr'> 140436271759144
<class 'ir.BinExpr'> 140436271759144 -> <class 'ir.ArrayElement'> 140436271759200
<class 'ir.ArrayElement'> 140436271759200 -> <class 'ir.PrintStat'> 140436271759256
<class 'ir.PrintStat'> 140436271759256 -> <class 'ir.StatList'> 140436271757520
<class 'ir.Var'> 140436271829120 -> <class 'ir.BinExpr'> 140436271829176
<class 'ir.Const'> 140436271829232 -> <class 'ir.BinExpr'> 140436271829176
<class 'ir.BinExpr'> 140436271829176 -> <class 'ir.AssignStat'> 140436271829288
<class 'ir.AssignStat'> 140436271829288 -> <class 'ir.StatList'> 140436271757520
<class 'ir.Var'> 140436271829456 -> <class 'ir.BinExpr'> 140436271829512
<class 'ir.Const'> 140436271829568 -> <class 'ir.BinExpr'> 140436271829512
<class 'ir.BinExpr'> 140436271829512 -> <class 'ir.AssignStat'> 140436271829624
<class 'ir.AssignStat'> 140436271829624 -> <class 'ir.StatList'> 140436271757520
<class 'ir.StatList'> 140436271757520 -> <class 'ir.WhileStat'> 140436271829792
<class 'ir.Var'> 140436271730416 -> <class 'ir.BinExpr'> 140436271757240
<class 'ir.Const'> 140436271757184 -> <class 'ir.BinExpr'> 140436271757240
<class 'ir.BinExpr'> 140436271757240 -> <class 'ir.WhileStat'> 140436271829792
<class 'ir.WhileStat'> 140436271829792 -> <class 'ir.StatList'> 140436271758360
<class 'ir.StatList'> 140436271758360 -> <class 'ir.WhileStat'> 140436271829960
<class 'ir.Var'> 140436271758248 -> <class 'ir.BinExpr'> 140436271758472
<class 'ir.Const'> 140436271758416 -> <class 'ir.BinExpr'> 140436271758472
<class 'ir.BinExpr'> 140436271758472 -> <class 'ir.WhileStat'> 140436271829960
<class 'ir.WhileStat'> 140436271829960 -> <class 'ir.StatList'> 140436271729744
<class 'ir.StatList'> 140436271729744 -> <class 'ir.Block'> 140436271830128
<class 'ir.Const'> 140436271729016 -> <class 'ir.AssignStat'> 140436271729128
<class 'ir.AssignStat'> 140436271729128 -> <class 'ir.StatList'> 140436271728904
<class 'ir.Var'> 140436271729240 -> <class 'ir.BinExpr'> 140436271729296
<class 'ir.Var'> 140436271729352 -> <class 'ir.BinExpr'> 140436271729296
<class 'ir.BinExpr'> 140436271729296 -> <class 'ir.AssignStat'> 140436271729408
<class 'ir.AssignStat'> 140436271729408 -> <class 'ir.StatList'> 140436271728904
<class 'ir.StatList'> 140436271728904 -> <class 'ir.Block'> 140436271729576
<class 'ir.DefinitionList'> 140436271728848 -> <class 'ir.Block'> 140436271729576
<class 'ir.Block'> 140436271729576 -> <class 'ir.FunctionDef'> 140436271729688
<class 'ir.FunctionDef'> 140436271729688 -> <class 'ir.DefinitionList'> 140436272016016
<class 'ir.DefinitionList'> 140436272016016 -> <class 'ir.Block'> 140436271830128
<class 'ir.Block'> 140436271830128 -> <class 'NoneType'> 10306432

Total nodes in IR: 112 

navigating children of <class 'ir.StatList'> 140436271729744 10
navigating children of <class 'ir.UnExpr'> 140436271729856 2
StatList : new 140436271864744
Lowering <class 'ir.Const'> 140436271729800
StatList : new 140436271864856
Lowering <class 'ir.UnExpr'> 140436271729856
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729632
StatList : new 140436271865192
Lowering <class 'ir.AssignStat'> 140436271729632
StatList : new 140436271865304
Lowering <class 'ir.ReadStat'> 140436271730024
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271730080
StatList : new 140436271865696
Lowering <class 'ir.AssignStat'> 140436271730080
navigating children of <class 'ir.StatList'> 140436271730472 1
navigating children of <class 'ir.PrintStat'> 140436271729072 1
navigating children of <class 'ir.UnExpr'> 140436271729464 2
StatList : new 140436271878832
Lowering <class 'ir.Var'> 140436271729184
StatList : new 140436271879056
Lowering <class 'ir.UnExpr'> 140436271729464
navigating children of <class 'ir.UnExpr'> 140436271729464 2
navigating children of <class 'ir.StatList'> 140436271878832 1
Cannot lower 140436271878776 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271878832 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 140436271879616
Lowering <class 'ir.UnExpr'> 140436271729464
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271729072
StatList : new 140436271879840
Lowering <class 'ir.PrintStat'> 140436271729072
Cannot lower 140436271730472 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  thenpart  of <class 'ir.IfStat'> 140436271730528
navigating children of <class 'ir.StatList'> 140436271729968 1
navigating children of <class 'ir.PrintStat'> 140436271730192 1
StatList : new 140436271880512
Lowering <class 'ir.Var'> 140436271730136
StatList : new 140436271880736
Lowering <class 'ir.Var'> 140436271730136
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271730192
StatList : new 140436271880960
Lowering <class 'ir.PrintStat'> 140436271730192
Cannot lower 140436271729968 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  elsepart  of <class 'ir.IfStat'> 140436271730528
navigating children of <class 'ir.BinExpr'> 140436271730304 3
StatList : new 140436271881464
Lowering <class 'ir.Var'> 140436271730248
StatList : new 140436271881744
Lowering <class 'ir.Const'> 140436271730360
StatList : new 140436271882080
Lowering <class 'ir.BinExpr'> 140436271730304
successfully navigated attr  cond  of <class 'ir.IfStat'> 140436271730528
StatList : new 140436271890896
Lowering <class 'ir.IfStat'> 140436271730528
StatList : new 140436271891176
Lowering <class 'ir.Const'> 140436271755392
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271755504
StatList : new 140436271891400
Lowering <class 'ir.AssignStat'> 140436271755504
navigating children of <class 'ir.StatList'> 140436271755896 3
Cannot lower 140436271756008 <class 'ir.CallExpr'> 'CallExpr' object has no attribute 'lower'
successfully navigated attr  call  of <class 'ir.CallStat'> 140436271756064
Lowering <class 'ir.CallStat'> 140436271756064
navigating children of <class 'ir.BinExpr'> 140436271756176 3
StatList : new 140436271892240
Lowering <class 'ir.Var'> 140436271755840
StatList : new 140436271892520
Lowering <class 'ir.Const'> 140436271756232
StatList : new 140436271892856
Lowering <class 'ir.BinExpr'> 140436271756176
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756288
StatList : new 140436271893080
Lowering <class 'ir.AssignStat'> 140436271756288
navigating children of <class 'ir.PrintStat'> 140436271756624 1
StatList : new 140436271831528
Lowering <class 'ir.Var'> 140436271756512
StatList : new 140436271832424
Lowering <class 'ir.Var'> 140436271756512
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271756624
StatList : new 140436271832592
Lowering <class 'ir.PrintStat'> 140436271756624
Cannot lower 140436271755896 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271756456
navigating children of <class 'ir.BinExpr'> 140436271755728 3
StatList : new 140436271830464
Lowering <class 'ir.Var'> 140436271755616
StatList : new 140436271831808
Lowering <class 'ir.Const'> 140436271755672
StatList : new 140436271829904
Lowering <class 'ir.BinExpr'> 140436271755728
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271756456
StatList : new 140436271830184
Lowering <class 'ir.WhileStat'> 140436271756456
StatList : new 140436271832984
Lowering <class 'ir.Const'> 140436271756848
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756904
StatList : new 140436271831136
Lowering <class 'ir.AssignStat'> 140436271756904
navigating children of <class 'ir.StatList'> 140436271730584 3
StatList : new 140436271832200
Lowering <class 'ir.Var'> 140436271755952
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271756120
navigating children of <class 'ir.BinExpr'> 140436271755560 3
navigating children of <class 'ir.BinExpr'> 140436271755448 3
StatList : new 140436271862224
Lowering <class 'ir.Var'> 140436271730640
StatList : new 140436271862056
Lowering <class 'ir.Const'> 140436271755336
StatList : new 140436271862840
Lowering <class 'ir.BinExpr'> 140436271755448
StatList : new 140436271863288
Lowering <class 'ir.Const'> 140436271755784
StatList : new 140436271863792
Lowering <class 'ir.BinExpr'> 140436271755560
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140436271756120
StatList : new 140436271864800
Lowering <class 'ir.AssignStat'> 140436271756120
navigating children of <class 'ir.PrintStat'> 140436271757128 1
navigating children of <class 'ir.ArrayElement'> 140436271756736 1
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.BinExpr'> 140436271756792 3
StatList : new 140436271878440
Lowering <class 'ir.Var'> 140436271756568
StatList : new 140436271879392
Lowering <class 'ir.Const'> 140436271756680
StatList : new 140436271880008
Lowering <class 'ir.BinExpr'> 140436271756792
StatList : new 140436271880792
Lowering <class 'ir.Const'> 140436271757016
StatList : new 140436271881184
Lowering <class 'ir.BinExpr'> 140436271756960
navigating children of <class 'ir.BinExpr'> 140436271756960 3
navigating children of <class 'ir.StatList'> 140436271880008 3
navigating children of <class 'ir.StatList'> 140436271878440 1
Cannot lower 140436271879112 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271878440 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271879392 1
Cannot lower 140436271879448 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271879392 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271879952 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271880008 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271880792 1
Cannot lower 140436271880568 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271880792 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 140436271893192
Lowering <class 'ir.BinExpr'> 140436271756960
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271756736
StatList : new 140436271894032
Lowering <class 'ir.ArrayElement'> 140436271756736
navigating children of <class 'ir.ArrayElement'> 140436271756736 1
navigating children of <class 'ir.StatList'> 140436271881184 3
navigating children of <class 'ir.StatList'> 140436271880008 3
navigating children of <class 'ir.StatList'> 140436271878440 1
Cannot lower 140436271879112 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271878440 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271879392 1
Cannot lower 140436271879448 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271879392 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271879952 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271880008 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271880792 1
Cannot lower 140436271880568 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271880792 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271881128 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271881184 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271893192 3
navigating children of <class 'ir.StatList'> 140436271880008 3
navigating children of <class 'ir.StatList'> 140436271878440 1
Cannot lower 140436271879112 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271878440 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271879392 1
Cannot lower 140436271879448 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271879392 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271879952 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271880008 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271880792 1
Cannot lower 140436271880568 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271880792 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271893136 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271893192 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271756736
StatList : new 140436271909184
Lowering <class 'ir.ArrayElement'> 140436271756736
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271757128
StatList : new 140436271909352
Lowering <class 'ir.PrintStat'> 140436271757128
navigating children of <class 'ir.BinExpr'> 140436271757352 3
StatList : new 140436271909800
Lowering <class 'ir.Var'> 140436271757296
StatList : new 140436271910080
Lowering <class 'ir.Const'> 140436271757408
StatList : new 140436271910416
Lowering <class 'ir.BinExpr'> 140436271757352
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271757464
StatList : new 140436271910640
Lowering <class 'ir.AssignStat'> 140436271757464
Cannot lower 140436271730584 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271757632
navigating children of <class 'ir.BinExpr'> 140436271729912 3
StatList : new 140436271796520
Lowering <class 'ir.Var'> 140436271757072
StatList : new 140436271796800
Lowering <class 'ir.Const'> 140436271729520
StatList : new 140436271797136
Lowering <class 'ir.BinExpr'> 140436271729912
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271757632
StatList : new 140436271797696
Lowering <class 'ir.WhileStat'> 140436271757632
StatList : new 140436271797976
Lowering <class 'ir.Const'> 140436271757800
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271757912
StatList : new 140436271758752
Lowering <class 'ir.AssignStat'> 140436271757912
StatList : new 140436271879672
Lowering <class 'ir.Const'> 140436271758024
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271758136
StatList : new 140436271881800
Lowering <class 'ir.AssignStat'> 140436271758136
navigating children of <class 'ir.StatList'> 140436271758360 1
navigating children of <class 'ir.StatList'> 140436271757520 4
navigating children of <class 'ir.ArrayElement'> 140436271758528 1
navigating children of <class 'ir.BinExpr'> 140436271758304 3
StatList : new 140436271865528
Lowering <class 'ir.Var'> 140436271758192
StatList : new 140436271891624
Lowering <class 'ir.Const'> 140436271758584
StatList : new 140436271891680
Lowering <class 'ir.BinExpr'> 140436271758304
navigating children of <class 'ir.BinExpr'> 140436271758304 3
navigating children of <class 'ir.StatList'> 140436271865528 1
Cannot lower 140436271865136 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271865528 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271891624 1
Cannot lower 140436271865248 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271891624 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 140436271894088
Lowering <class 'ir.BinExpr'> 140436271758304
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271758528
StatList : new 140436271831472
Lowering <class 'ir.ArrayElement'> 140436271758528
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271758640
navigating children of <class 'ir.BinExpr'> 140436271758080 3
navigating children of <class 'ir.BinExpr'> 140436271757688 3
StatList : new 140436271907168
Lowering <class 'ir.Var'> 140436271756400
StatList : new 140436271907448
Lowering <class 'ir.Const'> 140436271757744
StatList : new 140436271907952
Lowering <class 'ir.BinExpr'> 140436271757688
navigating children of <class 'ir.BinExpr'> 140436271757968 3
StatList : new 140436271908288
Lowering <class 'ir.Var'> 140436271757576
StatList : new 140436271909408
Lowering <class 'ir.Const'> 140436271757856
StatList : new 140436271910528
Lowering <class 'ir.BinExpr'> 140436271757968
StatList : new 140436271796856
Lowering <class 'ir.BinExpr'> 140436271758080
successfully navigated attr  offset  of <class 'ir.AssignStat'> 140436271758640
StatList : new 140436271798648
Lowering <class 'ir.AssignStat'> 140436271758640
navigating children of <class 'ir.PrintStat'> 140436271759256 1
navigating children of <class 'ir.ArrayElement'> 140436271759200 1
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.BinExpr'> 140436271759032 3
StatList : new 140436271799488
Lowering <class 'ir.Var'> 140436271758808
StatList : new 140436271799768
Lowering <class 'ir.Const'> 140436271758920
StatList : new 140436271800104
Lowering <class 'ir.BinExpr'> 140436271759032
navigating children of <class 'ir.BinExpr'> 140436271759088 3
StatList : new 140436271395112
Lowering <class 'ir.Var'> 140436271758864
StatList : new 140436271395392
Lowering <class 'ir.Const'> 140436271758976
StatList : new 140436271395728
Lowering <class 'ir.BinExpr'> 140436271759088
StatList : new 140436271396064
Lowering <class 'ir.BinExpr'> 140436271759144
navigating children of <class 'ir.BinExpr'> 140436271759144 3
navigating children of <class 'ir.StatList'> 140436271800104 3
navigating children of <class 'ir.StatList'> 140436271799488 1
Cannot lower 140436271799432 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271799488 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271799768 1
Cannot lower 140436271799712 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271799768 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271800048 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271800104 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271395728 3
navigating children of <class 'ir.StatList'> 140436271395112 1
Cannot lower 140436271395056 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271395112 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271395392 1
Cannot lower 140436271395336 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271395392 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271395672 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271395728 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
StatList : new 140436271397744
Lowering <class 'ir.BinExpr'> 140436271759144
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271759200
StatList : new 140436271398584
Lowering <class 'ir.ArrayElement'> 140436271759200
navigating children of <class 'ir.ArrayElement'> 140436271759200 1
navigating children of <class 'ir.StatList'> 140436271396064 3
navigating children of <class 'ir.StatList'> 140436271800104 3
navigating children of <class 'ir.StatList'> 140436271799488 1
Cannot lower 140436271799432 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271799488 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271799768 1
Cannot lower 140436271799712 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271799768 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271800048 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271800104 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271395728 3
navigating children of <class 'ir.StatList'> 140436271395112 1
Cannot lower 140436271395056 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271395112 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271395392 1
Cannot lower 140436271395336 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271395392 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271395672 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271395728 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271396008 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271396064 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271397744 3
navigating children of <class 'ir.StatList'> 140436271800104 3
navigating children of <class 'ir.StatList'> 140436271799488 1
Cannot lower 140436271799432 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271799488 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271799768 1
Cannot lower 140436271799712 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271799768 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271800048 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271800104 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271395728 3
navigating children of <class 'ir.StatList'> 140436271395112 1
Cannot lower 140436271395056 <class 'ir.LoadStat'> 'LoadStat' object has no attribute 'lower'
Cannot lower 140436271395112 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271395392 1
Cannot lower 140436271395336 <class 'ir.LoadImmStat'> 'LoadImmStat' object has no attribute 'lower'
Cannot lower 140436271395392 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271395672 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271395728 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
Cannot lower 140436271397688 <class 'ir.BinStat'> 'BinStat' object has no attribute 'lower'
Cannot lower 140436271397744 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  offset  of <class 'ir.ArrayElement'> 140436271759200
StatList : new 140436271894144
Lowering <class 'ir.ArrayElement'> 140436271759200
successfully navigated attr  expr  of <class 'ir.PrintStat'> 140436271759256
StatList : new 140436271831080
Lowering <class 'ir.PrintStat'> 140436271759256
navigating children of <class 'ir.BinExpr'> 140436271829176 3
StatList : new 140436271907896
Lowering <class 'ir.Var'> 140436271829120
StatList : new 140436271910696
Lowering <class 'ir.Const'> 140436271829232
StatList : new 140436271798872
Lowering <class 'ir.BinExpr'> 140436271829176
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271829288
StatList : new 140436271799208
Lowering <class 'ir.AssignStat'> 140436271829288
navigating children of <class 'ir.BinExpr'> 140436271829512 3
StatList : new 140436271395168
Lowering <class 'ir.Var'> 140436271829456
StatList : new 140436271396288
Lowering <class 'ir.Const'> 140436271829568
StatList : new 140436271396680
Lowering <class 'ir.BinExpr'> 140436271829512
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271829624
StatList : new 140436271396400
Lowering <class 'ir.AssignStat'> 140436271829624
Cannot lower 140436271757520 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271829792
navigating children of <class 'ir.BinExpr'> 140436271757240 3
StatList : new 140436271397408
Lowering <class 'ir.Var'> 140436271730416
StatList : new 140436271398752
Lowering <class 'ir.Const'> 140436271757184
StatList : new 140436271403192
Lowering <class 'ir.BinExpr'> 140436271757240
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271829792
StatList : new 140436271403752
Lowering <class 'ir.WhileStat'> 140436271829792
Cannot lower 140436271758360 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.WhileStat'> 140436271829960
navigating children of <class 'ir.BinExpr'> 140436271758472 3
StatList : new 140436271404256
Lowering <class 'ir.Var'> 140436271758248
StatList : new 140436271404536
Lowering <class 'ir.Const'> 140436271758416
StatList : new 140436271404872
Lowering <class 'ir.BinExpr'> 140436271758472
successfully navigated attr  cond  of <class 'ir.WhileStat'> 140436271829960
StatList : new 140436271405432
Lowering <class 'ir.WhileStat'> 140436271829960
Cannot lower 140436271729744 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 140436271830128
navigating children of <class 'ir.DefinitionList'> 140436272016016 1
navigating children of <class 'ir.StatList'> 140436271728904 2
StatList : new 140436271406048
Lowering <class 'ir.Const'> 140436271729016
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729128
StatList : new 140436271406272
Lowering <class 'ir.AssignStat'> 140436271729128
navigating children of <class 'ir.BinExpr'> 140436271729296 3
StatList : new 140436271406720
Lowering <class 'ir.Var'> 140436271729240
StatList : new 140436271407000
Lowering <class 'ir.Var'> 140436271729352
StatList : new 140436271423784
Lowering <class 'ir.BinExpr'> 140436271729296
successfully navigated attr  expr  of <class 'ir.AssignStat'> 140436271729408
StatList : new 140436271424008
Lowering <class 'ir.AssignStat'> 140436271729408
Cannot lower 140436271728904 <class 'ir.StatList'> 'StatList' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.Block'> 140436271729576
Cannot lower 140436271728848 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 140436271729576
Cannot lower 140436271729576 <class 'ir.Block'> 'Block' object has no attribute 'lower'
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140436271729688
Cannot lower 140436271729688 <class 'ir.FunctionDef'> 'FunctionDef' object has no attribute 'lower'
Cannot lower 140436272016016 <class 'ir.DefinitionList'> 'DefinitionList' object has no attribute 'lower'
successfully navigated attr  defs  of <class 'ir.Block'> 140436271830128
Cannot lower 140436271830128 <class 'ir.Block'> 'Block' object has no attribute 'lower'
navigating children of <class 'ir.StatList'> 140436271729744 10
navigating children of <class 'ir.StatList'> 140436271865192 2
navigating children of <class 'ir.StatList'> 140436271864856 2
navigating children of <class 'ir.StatList'> 140436271864744 1
navigating children of <class 'ir.StatList'> 140436271865696 2
navigating children of <class 'ir.StatList'> 140436271865304 1
navigating children of <class 'ir.StatList'> 140436271890896 6
navigating children of <class 'ir.StatList'> 140436271882080 3
navigating children of <class 'ir.StatList'> 140436271881464 1
navigating children of <class 'ir.StatList'> 140436271881744 1
navigating children of <class 'ir.StatList'> 140436271729968 1
navigating children of <class 'ir.StatList'> 140436271880960 2
navigating children of <class 'ir.StatList'> 140436271880736 1
navigating children of <class 'ir.StatList'> 140436271730472 1
navigating children of <class 'ir.StatList'> 140436271879840 2
navigating children of <class 'ir.StatList'> 140436271879616 2
navigating children of <class 'ir.StatList'> 140436271878832 1
navigating children of <class 'ir.StatList'> 140436271891400 2
navigating children of <class 'ir.StatList'> 140436271891176 1
navigating children of <class 'ir.StatList'> 140436271830184 5
navigating children of <class 'ir.StatList'> 140436271829904 3
navigating children of <class 'ir.StatList'> 140436271830464 1
navigating children of <class 'ir.StatList'> 140436271831808 1
navigating children of <class 'ir.StatList'> 140436271755896 3
navigating children of <class 'ir.StatList'> 140436271893080 2
navigating children of <class 'ir.StatList'> 140436271892856 3
navigating children of <class 'ir.StatList'> 140436271892240 1
navigating children of <class 'ir.StatList'> 140436271892520 1
navigating children of <class 'ir.StatList'> 140436271832592 2
navigating children of <class 'ir.StatList'> 140436271832424 1
navigating children of <class 'ir.StatList'> 140436271831136 2
navigating children of <class 'ir.StatList'> 140436271832984 1
navigating children of <class 'ir.StatList'> 140436271797696 5
navigating children of <class 'ir.StatList'> 140436271797136 3
navigating children of <class 'ir.StatList'> 140436271796520 1
navigating children of <class 'ir.StatList'> 140436271796800 1
navigating children of <class 'ir.StatList'> 140436271730584 3
navigating children of <class 'ir.StatList'> 140436271864800 5
navigating children of <class 'ir.StatList'> 140436271832200 1
navigating children of <class 'ir.StatList'> 140436271863792 3
navigating children of <class 'ir.StatList'> 140436271862840 3
navigating children of <class 'ir.StatList'> 140436271862224 1
navigating children of <class 'ir.StatList'> 140436271862056 1
navigating children of <class 'ir.StatList'> 140436271863288 1
navigating children of <class 'ir.StatList'> 140436271909352 2
navigating children of <class 'ir.StatList'> 140436271909184 4
navigating children of <class 'ir.StatList'> 140436271893192 3
navigating children of <class 'ir.StatList'> 140436271880008 3
navigating children of <class 'ir.StatList'> 140436271878440 1
navigating children of <class 'ir.StatList'> 140436271879392 1
navigating children of <class 'ir.StatList'> 140436271880792 1
navigating children of <class 'ir.StatList'> 140436271910640 2
navigating children of <class 'ir.StatList'> 140436271910416 3
navigating children of <class 'ir.StatList'> 140436271909800 1
navigating children of <class 'ir.StatList'> 140436271910080 1
navigating children of <class 'ir.StatList'> 140436271758752 2
navigating children of <class 'ir.StatList'> 140436271797976 1
navigating children of <class 'ir.StatList'> 140436271881800 2
navigating children of <class 'ir.StatList'> 140436271879672 1
navigating children of <class 'ir.StatList'> 140436271405432 5
navigating children of <class 'ir.StatList'> 140436271404872 3
navigating children of <class 'ir.StatList'> 140436271404256 1
navigating children of <class 'ir.StatList'> 140436271404536 1
navigating children of <class 'ir.StatList'> 140436271758360 1
navigating children of <class 'ir.StatList'> 140436271403752 5
navigating children of <class 'ir.StatList'> 140436271403192 3
navigating children of <class 'ir.StatList'> 140436271397408 1
navigating children of <class 'ir.StatList'> 140436271398752 1
navigating children of <class 'ir.StatList'> 140436271757520 4
navigating children of <class 'ir.StatList'> 140436271798648 5
navigating children of <class 'ir.StatList'> 140436271831472 4
navigating children of <class 'ir.StatList'> 140436271894088 3
navigating children of <class 'ir.StatList'> 140436271865528 1
navigating children of <class 'ir.StatList'> 140436271891624 1
navigating children of <class 'ir.StatList'> 140436271796856 3
navigating children of <class 'ir.StatList'> 140436271907952 3
navigating children of <class 'ir.StatList'> 140436271907168 1
navigating children of <class 'ir.StatList'> 140436271907448 1
navigating children of <class 'ir.StatList'> 140436271910528 3
navigating children of <class 'ir.StatList'> 140436271908288 1
navigating children of <class 'ir.StatList'> 140436271909408 1
navigating children of <class 'ir.StatList'> 140436271831080 2
navigating children of <class 'ir.StatList'> 140436271894144 4
navigating children of <class 'ir.StatList'> 140436271397744 3
navigating children of <class 'ir.StatList'> 140436271800104 3
navigating children of <class 'ir.StatList'> 140436271799488 1
navigating children of <class 'ir.StatList'> 140436271799768 1
navigating children of <class 'ir.StatList'> 140436271395728 3
navigating children of <class 'ir.StatList'> 140436271395112 1
navigating children of <class 'ir.StatList'> 140436271395392 1
navigating children of <class 'ir.StatList'> 140436271799208 2
navigating children of <class 'ir.StatList'> 140436271798872 3
navigating children of <class 'ir.StatList'> 140436271907896 1
navigating children of <class 'ir.StatList'> 140436271910696 1
navigating children of <class 'ir.StatList'> 140436271396400 2
navigating children of <class 'ir.StatList'> 140436271396680 3
navigating children of <class 'ir.StatList'> 140436271395168 1
navigating children of <class 'ir.StatList'> 140436271396288 1
successfully navigated attr  body  of <class 'ir.Block'> 140436271830128
navigating children of <class 'ir.DefinitionList'> 140436272016016 1
navigating children of <class 'ir.StatList'> 140436271728904 2
navigating children of <class 'ir.StatList'> 140436271406272 2
navigating children of <class 'ir.StatList'> 140436271406048 1
navigating children of <class 'ir.StatList'> 140436271424008 2
navigating children of <class 'ir.StatList'> 140436271423784 3
navigating children of <class 'ir.StatList'> 140436271406720 1
navigating children of <class 'ir.StatList'> 140436271407000 1
successfully navigated attr  body  of <class 'ir.Block'> 140436271729576
successfully navigated attr  defs  of <class 'ir.Block'> 140436271729576
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140436271729688
successfully navigated attr  defs  of <class 'ir.Block'> 140436271830128

 <class 'ir.Block'> 140436271830128 {
                                                                      <<<<<----- BUG? MISSING PARENT
	body: 	<class 'ir.StatList'> 140436271729744 {
	parent = 140436271830128
		children:
		<class 'ir.StatList'> 140436271865192 {
		parent = 140436271729744
			children:
			<class 'ir.StatList'> 140436271864856 {
			parent = 140436271865192
				children:
				<class 'ir.StatList'> 140436271864744 {
				parent = 140436271864856
					children:
					reg int t0 <- 1
				}
				reg int t1 <- minus reg int t0
			}
			global int x <- reg int t1
		}
		<class 'ir.StatList'> 140436271865696 {
		parent = 140436271729744
			children:
			<class 'ir.StatList'> 140436271865304 {
			parent = 140436271865696
				children:
				read reg int t2
			}
			global int x <- reg int t2
		}
		<class 'ir.StatList'> 140436271890896 {
		parent = 140436271729744
			children:
			<class 'ir.StatList'> 140436271882080 {
			parent = 140436271890896
				children:
				<class 'ir.StatList'> 140436271881464 {
				parent = 140436271882080
					children:
					reg int t8 <- global int x
				}
				<class 'ir.StatList'> 140436271881744 {
				parent = 140436271882080
					children:
					reg int t9 <- 100
				}
				reg int32_t t10 <- reg int t8 gtr reg int t9
			}
			branch on reg int32_t t10 to auto label label2
			<class 'ir.StatList'> 140436271729968 {
			parent = 140436271890896
				children:
				<class 'ir.StatList'> 140436271880960 {
				parent = 140436271729968
					children:
					<class 'ir.StatList'> 140436271880736 {
					parent = 140436271880960
						children:
						reg int t7 <- global int x
					}
					print reg int t7
				}
			}
			branch  to auto label label1
			label2: <class 'ir.StatList'> 140436271730472 {
			parent = 140436271890896
				children:
				<class 'ir.StatList'> 140436271879840 {
				parent = 140436271730472
					children:
					<class 'ir.StatList'> 140436271879616 {
					parent = 140436271879840
						children:
						<class 'ir.StatList'> 140436271878832 {
						parent = 140436271879616
							children:
							reg int t3 <- global int x
						}
						reg int t5 <- minus reg int t3
					}
					print reg int t5
				}
			}
			label1: <class 'ir.EmptyStat'> 140436271890616 {
			parent = 140436271890896
			}
		}
		<class 'ir.StatList'> 140436271891400 {
		parent = 140436271729744
			children:
			<class 'ir.StatList'> 140436271891176 {
			parent = 140436271891400
				children:
				reg int t11 <- 1
			}
			global int x <- reg int t11
		}
		<class 'ir.StatList'> 140436271830184 {
		parent = 140436271729744
			children:
			label3: <class 'ir.StatList'> 140436271829904 {
			parent = 140436271830184
				children:
				<class 'ir.StatList'> 140436271830464 {
				parent = 140436271829904
					children:
					reg int t17 <- global int x
				}
				<class 'ir.StatList'> 140436271831808 {
				parent = 140436271829904
					children:
					reg int t18 <- 10
				}
				reg int32_t t19 <- reg int t17 leq reg int t18
			}
			branch on not reg int32_t t19 to auto label label4
			<class 'ir.StatList'> 140436271755896 {
			parent = 140436271830184
				children:
				call  to auto function square
				<class 'ir.StatList'> 140436271893080 {
				parent = 140436271755896
					children:
					<class 'ir.StatList'> 140436271892856 {
					parent = 140436271893080
						children:
						<class 'ir.StatList'> 140436271892240 {
						parent = 140436271892856
							children:
							reg int t12 <- global int x
						}
						<class 'ir.StatList'> 140436271892520 {
						parent = 140436271892856
							children:
							reg int t13 <- 1
						}
						reg int32_t t14 <- reg int t12 plus reg int t13
					}
					global int x <- reg int32_t t14
				}
				<class 'ir.StatList'> 140436271832592 {
				parent = 140436271755896
					children:
					<class 'ir.StatList'> 140436271832424 {
					parent = 140436271832592
						children:
						reg int t16 <- global int squ
					}
					print reg int t16
				}
			}
			branch  to auto label label3
			label4: <class 'ir.EmptyStat'> 140436271831640 {
			parent = 140436271830184
			}
		}
		<class 'ir.StatList'> 140436271831136 {
		parent = 140436271729744
			children:
			<class 'ir.StatList'> 140436271832984 {
			parent = 140436271831136
				children:
				reg int t20 <- 101
			}
			global int x <- reg int t20
		}
		<class 'ir.StatList'> 140436271797696 {
		parent = 140436271729744
			children:
			label5: <class 'ir.StatList'> 140436271797136 {
			parent = 140436271797696
				children:
				<class 'ir.StatList'> 140436271796520 {
				parent = 140436271797136
					children:
					reg int t44 <- global int x
				}
				<class 'ir.StatList'> 140436271796800 {
				parent = 140436271797136
					children:
					reg int t45 <- 105
				}
				reg int32_t t46 <- reg int t44 leq reg int t45
			}
			branch on not reg int32_t t46 to auto label label6
			<class 'ir.StatList'> 140436271730584 {
			parent = 140436271797696
				children:
				<class 'ir.StatList'> 140436271864800 {
				parent = 140436271730584
					children:
					<class 'ir.StatList'> 140436271832200 {
					parent = 140436271864800
						children:
						reg int t21 <- global int x
					}
					<class 'ir.StatList'> 140436271863792 {
					parent = 140436271864800
						children:
						<class 'ir.StatList'> 140436271862840 {
						parent = 140436271863792
							children:
							<class 'ir.StatList'> 140436271862224 {
							parent = 140436271862840
								children:
								reg int t22 <- global int x
							}
							<class 'ir.StatList'> 140436271862056 {
							parent = 140436271862840
								children:
								reg int t23 <- 100
							}
							reg int32_t t24 <- reg int t22 minus reg int t23
						}
						<class 'ir.StatList'> 140436271863288 {
						parent = 140436271863792
							children:
							reg int t25 <- 1
						}
						reg int32_t t26 <- reg int32_t t24 times reg int t25
					}
					reg &char t27 <- &(global char[5] arr)
					reg &char t28 <- reg &char t27 plus reg int32_t t26
					[reg &char t28] <- reg int t21
				}
				<class 'ir.StatList'> 140436271909352 {
				parent = 140436271730584
					children:
					<class 'ir.StatList'> 140436271909184 {
					parent = 140436271909352
						children:
						<class 'ir.StatList'> 140436271893192 {
						parent = 140436271909184
							children:
							<class 'ir.StatList'> 140436271880008 {
							parent = 140436271893192
								children:
								<class 'ir.StatList'> 140436271878440 {
								parent = 140436271880008
									children:
									reg int t29 <- global int x
								}
								<class 'ir.StatList'> 140436271879392 {
								parent = 140436271880008
									children:
									reg int t30 <- 100
								}
								reg int32_t t31 <- reg int t29 minus reg int t30
							}
							<class 'ir.StatList'> 140436271880792 {
							parent = 140436271893192
								children:
								reg int t32 <- 1
							}
							reg int32_t t34 <- reg int32_t t31 times reg int t32
						}
						reg &char t39 <- &(global char[5] arr)
						reg &char t40 <- reg &char t39 plus reg int32_t t34
						reg char t38 <- [reg &char t40]
					}
					print reg char t38
				}
				<class 'ir.StatList'> 140436271910640 {
				parent = 140436271730584
					children:
					<class 'ir.StatList'> 140436271910416 {
					parent = 140436271910640
						children:
						<class 'ir.StatList'> 140436271909800 {
						parent = 140436271910416
							children:
							reg int t41 <- global int x
						}
						<class 'ir.StatList'> 140436271910080 {
						parent = 140436271910416
							children:
							reg int t42 <- 1
						}
						reg int32_t t43 <- reg int t41 plus reg int t42
					}
					global int x <- reg int32_t t43
				}
			}
			branch  to auto label label5
			label6: <class 'ir.EmptyStat'> 140436271797528 {
			parent = 140436271797696
			}
		}
		<class 'ir.StatList'> 140436271758752 {
		parent = 140436271729744
			children:
			<class 'ir.StatList'> 140436271797976 {
			parent = 140436271758752
				children:
				reg int t47 <- 1
			}
			global int x <- reg int t47
		}
		<class 'ir.StatList'> 140436271881800 {
		parent = 140436271729744
			children:
			<class 'ir.StatList'> 140436271879672 {
			parent = 140436271881800
				children:
				reg int t48 <- 1
			}
			global int y <- reg int t48
		}
		<class 'ir.StatList'> 140436271405432 {
		parent = 140436271729744
			children:
			label9: <class 'ir.StatList'> 140436271404872 {
			parent = 140436271405432
				children:
				<class 'ir.StatList'> 140436271404256 {
				parent = 140436271404872
					children:
					reg int t88 <- global int x
				}
				<class 'ir.StatList'> 140436271404536 {
				parent = 140436271404872
					children:
					reg int t89 <- 5
				}
				reg int32_t t90 <- reg int t88 leq reg int t89
			}
			branch on not reg int32_t t90 to auto label label10
			<class 'ir.StatList'> 140436271758360 {
			parent = 140436271405432
				children:
				<class 'ir.StatList'> 140436271403752 {
				parent = 140436271758360
					children:
					label7: <class 'ir.StatList'> 140436271403192 {
					parent = 140436271403752
						children:
						<class 'ir.StatList'> 140436271397408 {
						parent = 140436271403192
							children:
							reg int t85 <- global int y
						}
						<class 'ir.StatList'> 140436271398752 {
						parent = 140436271403192
							children:
							reg int t86 <- 5
						}
						reg int32_t t87 <- reg int t85 leq reg int t86
					}
					branch on not reg int32_t t87 to auto label label8
					<class 'ir.StatList'> 140436271757520 {
					parent = 140436271403752
						children:
						<class 'ir.StatList'> 140436271798648 {
						parent = 140436271757520
							children:
							<class 'ir.StatList'> 140436271831472 {
							parent = 140436271798648
								children:
								<class 'ir.StatList'> 140436271894088 {
								parent = 140436271831472
									children:
									<class 'ir.StatList'> 140436271865528 {
									parent = 140436271894088
										children:
										reg int t49 <- global int x
									}
									<class 'ir.StatList'> 140436271891624 {
									parent = 140436271894088
										children:
										reg int t50 <- 1
									}
									reg int32_t t52 <- reg int t49 times reg int t50
								}
								reg &char t54 <- &(global char[5] arr)
								reg &char t55 <- reg &char t54 plus reg int32_t t52
								reg char t53 <- [reg &char t55]
							}
							<class 'ir.StatList'> 140436271796856 {
							parent = 140436271798648
								children:
								<class 'ir.StatList'> 140436271907952 {
								parent = 140436271796856
									children:
									<class 'ir.StatList'> 140436271907168 {
									parent = 140436271907952
										children:
										reg int t56 <- global int x
									}
									<class 'ir.StatList'> 140436271907448 {
									parent = 140436271907952
										children:
										reg int t57 <- 10
									}
									reg int32_t t58 <- reg int t56 times reg int t57
								}
								<class 'ir.StatList'> 140436271910528 {
								parent = 140436271796856
									children:
									<class 'ir.StatList'> 140436271908288 {
									parent = 140436271910528
										children:
										reg int t59 <- global int y
									}
									<class 'ir.StatList'> 140436271909408 {
									parent = 140436271910528
										children:
										reg int t60 <- 2
									}
									reg int32_t t61 <- reg int t59 times reg int t60
								}
								reg int32_t t62 <- reg int32_t t58 plus reg int32_t t61
							}
							reg &short t63 <- &(global short[5, 5] multid)
							reg &short t64 <- reg &short t63 plus reg int32_t t62
							[reg &short t64] <- reg char t53
						}
						<class 'ir.StatList'> 140436271831080 {
						parent = 140436271757520
							children:
							<class 'ir.StatList'> 140436271894144 {
							parent = 140436271831080
								children:
								<class 'ir.StatList'> 140436271397744 {
								parent = 140436271894144
									children:
									<class 'ir.StatList'> 140436271800104 {
									parent = 140436271397744
										children:
										<class 'ir.StatList'> 140436271799488 {
										parent = 140436271800104
											children:
											reg int t65 <- global int x
										}
										<class 'ir.StatList'> 140436271799768 {
										parent = 140436271800104
											children:
											reg int t66 <- 10
										}
										reg int32_t t67 <- reg int t65 times reg int t66
									}
									<class 'ir.StatList'> 140436271395728 {
									parent = 140436271397744
										children:
										<class 'ir.StatList'> 140436271395112 {
										parent = 140436271395728
											children:
											reg int t68 <- global int y
										}
										<class 'ir.StatList'> 140436271395392 {
										parent = 140436271395728
											children:
											reg int t69 <- 2
										}
										reg int32_t t70 <- reg int t68 times reg int t69
									}
									reg int32_t t72 <- reg int32_t t67 plus reg int32_t t70
								}
								reg &short t77 <- &(global short[5, 5] multid)
								reg &short t78 <- reg &short t77 plus reg int32_t t72
								reg short t76 <- [reg &short t78]
							}
							print reg short t76
						}
						<class 'ir.StatList'> 140436271799208 {
						parent = 140436271757520
							children:
							<class 'ir.StatList'> 140436271798872 {
							parent = 140436271799208
								children:
								<class 'ir.StatList'> 140436271907896 {
								parent = 140436271798872
									children:
									reg int t79 <- global int x
								}
								<class 'ir.StatList'> 140436271910696 {
								parent = 140436271798872
									children:
									reg int t80 <- 1
								}
								reg int32_t t81 <- reg int t79 plus reg int t80
							}
							global int x <- reg int32_t t81
						}
						<class 'ir.StatList'> 140436271396400 {
						parent = 140436271757520
							children:
							<class 'ir.StatList'> 140436271396680 {
							parent = 140436271396400
								children:
								<class 'ir.StatList'> 140436271395168 {
								parent = 140436271396680
									children:
									reg int t82 <- global int y
								}
								<class 'ir.StatList'> 140436271396288 {
								parent = 140436271396680
									children:
									reg int t83 <- 1
								}
								reg int32_t t84 <- reg int t82 plus reg int t83
							}
							global int y <- reg int32_t t84
						}
					}
					branch  to auto label label7
					label8: <class 'ir.EmptyStat'> 140436271403584 {
					parent = 140436271403752
					}
				}
			}
			branch  to auto label label9
			label10: <class 'ir.EmptyStat'> 140436271405264 {
			parent = 140436271405432
			}
		}
	}
	global_symtab: 	SymbolTable:
	
	defs: 	<class 'ir.DefinitionList'> 140436272016016 {
	parent = 140436271830128
		children:
		<class 'ir.FunctionDef'> 140436271729688 {
		parent = 140436272016016
			body: 	<class 'ir.Block'> 140436271729576 {
			parent = 140436271729688
				body: 	<class 'ir.StatList'> 140436271728904 {
				parent = 140436271729576
					children:
					<class 'ir.StatList'> 140436271406272 {
					parent = 140436271728904
						children:
						<class 'ir.StatList'> 140436271406048 {
						parent = 140436271406272
							children:
							reg int t91 <- 1234
						}
						auto int test <- reg int t91
					}
					<class 'ir.StatList'> 140436271424008 {
					parent = 140436271728904
						children:
						<class 'ir.StatList'> 140436271423784 {
						parent = 140436271424008
							children:
							<class 'ir.StatList'> 140436271406720 {
							parent = 140436271423784
								children:
								reg int t92 <- global int x
							}
							<class 'ir.StatList'> 140436271407000 {
							parent = 140436271423784
								children:
								reg int t93 <- global int x
							}
							reg int32_t t94 <- reg int t92 times reg int t93
						}
						global int squ <- reg int32_t t94
					}
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				auto function square
				
				defs: 	<class 'ir.DefinitionList'> 140436271728848 {
				parent = 140436271729576
				}
			}
			symbol: 	auto function square
		}
	}
} 

<class 'ir.LoadImmStat'> 140436271864072
<class 'ir.StatList'> 140436271864744
Flattening 140436271864744 into 140436271864856
<class 'ir.UnaryStat'> 140436271865024
<class 'ir.StatList'> 140436271864856
Flattening 140436271864856 into 140436271865192
<class 'ir.StoreStat'> 140436271864688
<class 'ir.StatList'> 140436271865192
Flattening 140436271865192 into 140436271729744
<class 'ir.ReadCommand'> 140436271865472
<class 'ir.StatList'> 140436271865304
Flattening 140436271865304 into 140436271865696
<class 'ir.StoreStat'> 140436271865640
<class 'ir.StatList'> 140436271865696
Flattening 140436271865696 into 140436271729744
<class 'ir.LoadStat'> 140436271881408
<class 'ir.StatList'> 140436271881464
Flattening 140436271881464 into 140436271882080
<class 'ir.LoadImmStat'> 140436271881688
<class 'ir.StatList'> 140436271881744
Flattening 140436271881744 into 140436271882080
<class 'ir.BinStat'> 140436271882024
<class 'ir.StatList'> 140436271882080
Flattening 140436271882080 into 140436271890896
<class 'ir.BranchStat'> 140436271890784
<class 'ir.LoadStat'> 140436271880680
<class 'ir.StatList'> 140436271880736
Flattening 140436271880736 into 140436271880960
<class 'ir.PrintCommand'> 140436271880904
<class 'ir.StatList'> 140436271880960
Flattening 140436271880960 into 140436271729968
<class 'ir.StatList'> 140436271729968
Flattening 140436271729968 into 140436271890896
<class 'ir.BranchStat'> 140436271890840
<class 'ir.LoadStat'> 140436271878776
<class 'ir.StatList'> 140436271878832
Flattening 140436271878832 into 140436271879616
<class 'ir.UnaryStat'> 140436271879560
<class 'ir.StatList'> 140436271879616
Flattening 140436271879616 into 140436271879840
<class 'ir.PrintCommand'> 140436271879784
<class 'ir.StatList'> 140436271879840
Flattening 140436271879840 into 140436271730472
<class 'ir.StatList'> 140436271730472
Flattening 140436271730472 into 140436271890896
<class 'ir.EmptyStat'> 140436271890616
<class 'ir.StatList'> 140436271890896
Flattening 140436271890896 into 140436271729744
<class 'ir.LoadImmStat'> 140436271891120
<class 'ir.StatList'> 140436271891176
Flattening 140436271891176 into 140436271891400
<class 'ir.StoreStat'> 140436271891344
<class 'ir.StatList'> 140436271891400
Flattening 140436271891400 into 140436271729744
<class 'ir.LoadStat'> 140436271830912
<class 'ir.StatList'> 140436271830464
Flattening 140436271830464 into 140436271829904
<class 'ir.LoadImmStat'> 140436271832088
<class 'ir.StatList'> 140436271831808
Flattening 140436271831808 into 140436271829904
<class 'ir.BinStat'> 140436271830856
<class 'ir.StatList'> 140436271829904
Flattening 140436271829904 into 140436271830184
<class 'ir.BranchStat'> 140436271832032
<class 'ir.BranchStat'> 140436271891792
<class 'ir.LoadStat'> 140436271892184
<class 'ir.StatList'> 140436271892240
Flattening 140436271892240 into 140436271892856
<class 'ir.LoadImmStat'> 140436271892464
<class 'ir.StatList'> 140436271892520
Flattening 140436271892520 into 140436271892856
<class 'ir.BinStat'> 140436271892800
<class 'ir.StatList'> 140436271892856
Flattening 140436271892856 into 140436271893080
<class 'ir.StoreStat'> 140436271893024
<class 'ir.StatList'> 140436271893080
Flattening 140436271893080 into 140436271755896
<class 'ir.LoadStat'> 140436271830240
<class 'ir.StatList'> 140436271832424
Flattening 140436271832424 into 140436271832592
<class 'ir.PrintCommand'> 140436271832648
<class 'ir.StatList'> 140436271832592
Flattening 140436271832592 into 140436271755896
<class 'ir.StatList'> 140436271755896
Flattening 140436271755896 into 140436271830184
<class 'ir.BranchStat'> 140436271831976
<class 'ir.EmptyStat'> 140436271831640
<class 'ir.StatList'> 140436271830184
Flattening 140436271830184 into 140436271729744
<class 'ir.LoadImmStat'> 140436271832872
<class 'ir.StatList'> 140436271832984
Flattening 140436271832984 into 140436271831136
<class 'ir.StoreStat'> 140436271831752
<class 'ir.StatList'> 140436271831136
Flattening 140436271831136 into 140436271729744
<class 'ir.LoadStat'> 140436271796464
<class 'ir.StatList'> 140436271796520
Flattening 140436271796520 into 140436271797136
<class 'ir.LoadImmStat'> 140436271796744
<class 'ir.StatList'> 140436271796800
Flattening 140436271796800 into 140436271797136
<class 'ir.BinStat'> 140436271797080
<class 'ir.StatList'> 140436271797136
Flattening 140436271797136 into 140436271797696
<class 'ir.BranchStat'> 140436271797584
<class 'ir.LoadStat'> 140436271831696
<class 'ir.StatList'> 140436271832200
Flattening 140436271832200 into 140436271864800
<class 'ir.LoadStat'> 140436271862392
<class 'ir.StatList'> 140436271862224
Flattening 140436271862224 into 140436271862840
<class 'ir.LoadImmStat'> 140436271863064
<class 'ir.StatList'> 140436271862056
Flattening 140436271862056 into 140436271862840
<class 'ir.BinStat'> 140436271862672
<class 'ir.StatList'> 140436271862840
Flattening 140436271862840 into 140436271863792
<class 'ir.LoadImmStat'> 140436271863176
<class 'ir.StatList'> 140436271863288
Flattening 140436271863288 into 140436271863792
<class 'ir.BinStat'> 140436271863344
<class 'ir.StatList'> 140436271863792
Flattening 140436271863792 into 140436271864800
<class 'ir.LoadPtrToSym'> 140436271864016
<class 'ir.BinStat'> 140436271864296
<class 'ir.StoreStat'> 140436271864464
<class 'ir.StatList'> 140436271864800
Flattening 140436271864800 into 140436271730584
<class 'ir.LoadStat'> 140436271879112
<class 'ir.StatList'> 140436271878440
Flattening 140436271878440 into 140436271880008
<class 'ir.LoadImmStat'> 140436271879448
<class 'ir.StatList'> 140436271879392
Flattening 140436271879392 into 140436271880008
<class 'ir.BinStat'> 140436271879952
<class 'ir.StatList'> 140436271880008
Flattening 140436271880008 into 140436271893192
<class 'ir.LoadImmStat'> 140436271880568
<class 'ir.StatList'> 140436271880792
Flattening 140436271880792 into 140436271893192
<class 'ir.BinStat'> 140436271893136
<class 'ir.StatList'> 140436271893192
Flattening 140436271893192 into 140436271909184
<class 'ir.LoadPtrToSym'> 140436271908792
<class 'ir.BinStat'> 140436271909072
<class 'ir.LoadStat'> 140436271909128
<class 'ir.StatList'> 140436271909184
Flattening 140436271909184 into 140436271909352
<class 'ir.PrintCommand'> 140436271909296
<class 'ir.StatList'> 140436271909352
Flattening 140436271909352 into 140436271730584
<class 'ir.LoadStat'> 140436271909744
<class 'ir.StatList'> 140436271909800
Flattening 140436271909800 into 140436271910416
<class 'ir.LoadImmStat'> 140436271910024
<class 'ir.StatList'> 140436271910080
Flattening 140436271910080 into 140436271910416
<class 'ir.BinStat'> 140436271910360
<class 'ir.StatList'> 140436271910416
Flattening 140436271910416 into 140436271910640
<class 'ir.StoreStat'> 140436271910584
<class 'ir.StatList'> 140436271910640
Flattening 140436271910640 into 140436271730584
<class 'ir.StatList'> 140436271730584
Flattening 140436271730584 into 140436271797696
<class 'ir.BranchStat'> 140436271797640
<class 'ir.EmptyStat'> 140436271797528
<class 'ir.StatList'> 140436271797696
Flattening 140436271797696 into 140436271729744
<class 'ir.LoadImmStat'> 140436271797920
<class 'ir.StatList'> 140436271797976
Flattening 140436271797976 into 140436271758752
<class 'ir.StoreStat'> 140436271759312
<class 'ir.StatList'> 140436271758752
Flattening 140436271758752 into 140436271729744
<class 'ir.LoadImmStat'> 140436271879168
<class 'ir.StatList'> 140436271879672
Flattening 140436271879672 into 140436271881800
<class 'ir.StoreStat'> 140436271881520
<class 'ir.StatList'> 140436271881800
Flattening 140436271881800 into 140436271729744
<class 'ir.LoadStat'> 140436271404200
<class 'ir.StatList'> 140436271404256
Flattening 140436271404256 into 140436271404872
<class 'ir.LoadImmStat'> 140436271404480
<class 'ir.StatList'> 140436271404536
Flattening 140436271404536 into 140436271404872
<class 'ir.BinStat'> 140436271404816
<class 'ir.StatList'> 140436271404872
Flattening 140436271404872 into 140436271405432
<class 'ir.BranchStat'> 140436271405320
<class 'ir.LoadStat'> 140436271397352
<class 'ir.StatList'> 140436271397408
Flattening 140436271397408 into 140436271403192
<class 'ir.LoadImmStat'> 140436271398696
<class 'ir.StatList'> 140436271398752
Flattening 140436271398752 into 140436271403192
<class 'ir.BinStat'> 140436271403136
<class 'ir.StatList'> 140436271403192
Flattening 140436271403192 into 140436271403752
<class 'ir.BranchStat'> 140436271403640
<class 'ir.LoadStat'> 140436271865136
<class 'ir.StatList'> 140436271865528
Flattening 140436271865528 into 140436271894088
<class 'ir.LoadImmStat'> 140436271865248
<class 'ir.StatList'> 140436271891624
Flattening 140436271891624 into 140436271894088
<class 'ir.BinStat'> 140436271894256
<class 'ir.StatList'> 140436271894088
Flattening 140436271894088 into 140436271831472
<class 'ir.LoadPtrToSym'> 140436271829736
<class 'ir.BinStat'> 140436271831920
<class 'ir.LoadStat'> 140436271833040
<class 'ir.StatList'> 140436271831472
Flattening 140436271831472 into 140436271798648
<class 'ir.LoadStat'> 140436271907112
<class 'ir.StatList'> 140436271907168
Flattening 140436271907168 into 140436271907952
<class 'ir.LoadImmStat'> 140436271907392
<class 'ir.StatList'> 140436271907448
Flattening 140436271907448 into 140436271907952
<class 'ir.BinStat'> 140436271907840
<class 'ir.StatList'> 140436271907952
Flattening 140436271907952 into 140436271796856
<class 'ir.LoadStat'> 140436271908232
<class 'ir.StatList'> 140436271908288
Flattening 140436271908288 into 140436271910528
<class 'ir.LoadImmStat'> 140436271909240
<class 'ir.StatList'> 140436271909408
Flattening 140436271909408 into 140436271910528
<class 'ir.BinStat'> 140436271910472
<class 'ir.StatList'> 140436271910528
Flattening 140436271910528 into 140436271796856
<class 'ir.BinStat'> 140436271796576
<class 'ir.StatList'> 140436271796856
Flattening 140436271796856 into 140436271798648
<class 'ir.LoadPtrToSym'> 140436271798200
<class 'ir.BinStat'> 140436271798480
<class 'ir.StoreStat'> 140436271798592
<class 'ir.StatList'> 140436271798648
Flattening 140436271798648 into 140436271757520
<class 'ir.LoadStat'> 140436271799432
<class 'ir.StatList'> 140436271799488
Flattening 140436271799488 into 140436271800104
<class 'ir.LoadImmStat'> 140436271799712
<class 'ir.StatList'> 140436271799768
Flattening 140436271799768 into 140436271800104
<class 'ir.BinStat'> 140436271800048
<class 'ir.StatList'> 140436271800104
Flattening 140436271800104 into 140436271397744
<class 'ir.LoadStat'> 140436271395056
<class 'ir.StatList'> 140436271395112
Flattening 140436271395112 into 140436271395728
<class 'ir.LoadImmStat'> 140436271395336
<class 'ir.StatList'> 140436271395392
Flattening 140436271395392 into 140436271395728
<class 'ir.BinStat'> 140436271395672
<class 'ir.StatList'> 140436271395728
Flattening 140436271395728 into 140436271397744
<class 'ir.BinStat'> 140436271397688
<class 'ir.StatList'> 140436271397744
Flattening 140436271397744 into 140436271894144
<class 'ir.LoadPtrToSym'> 140436271891232
<class 'ir.BinStat'> 140436271893248
<class 'ir.LoadStat'> 140436271892296
<class 'ir.StatList'> 140436271894144
Flattening 140436271894144 into 140436271831080
<class 'ir.PrintCommand'> 140436271894312
<class 'ir.StatList'> 140436271831080
Flattening 140436271831080 into 140436271757520
<class 'ir.LoadStat'> 140436271907504
<class 'ir.StatList'> 140436271907896
Flattening 140436271907896 into 140436271798872
<class 'ir.LoadImmStat'> 140436271909464
<class 'ir.StatList'> 140436271910696
Flattening 140436271910696 into 140436271798872
<class 'ir.BinStat'> 140436271798760
<class 'ir.StatList'> 140436271798872
Flattening 140436271798872 into 140436271799208
<class 'ir.StoreStat'> 140436271799152
<class 'ir.StatList'> 140436271799208
Flattening 140436271799208 into 140436271757520
<class 'ir.LoadStat'> 140436271798816
<class 'ir.StatList'> 140436271395168
Flattening 140436271395168 into 140436271396680
<class 'ir.LoadImmStat'> 140436271396176
<class 'ir.StatList'> 140436271396288
Flattening 140436271396288 into 140436271396680
<class 'ir.BinStat'> 140436271396568
<class 'ir.StatList'> 140436271396680
Flattening 140436271396680 into 140436271396400
<class 'ir.StoreStat'> 140436271396848
<class 'ir.StatList'> 140436271396400
Flattening 140436271396400 into 140436271757520
<class 'ir.StatList'> 140436271757520
Flattening 140436271757520 into 140436271403752
<class 'ir.BranchStat'> 140436271403696
<class 'ir.EmptyStat'> 140436271403584
<class 'ir.StatList'> 140436271403752
Flattening 140436271403752 into 140436271758360
<class 'ir.StatList'> 140436271758360
Flattening 140436271758360 into 140436271405432
<class 'ir.BranchStat'> 140436271405376
<class 'ir.EmptyStat'> 140436271405264
<class 'ir.StatList'> 140436271405432
Flattening 140436271405432 into 140436271729744
<class 'ir.StatList'> 140436271729744
Not flattening 140436271729744 into 140436271830128 of type <class 'ir.Block'>
<class 'ir.LoadImmStat'> 140436271405992
<class 'ir.StatList'> 140436271406048
Flattening 140436271406048 into 140436271406272
<class 'ir.StoreStat'> 140436271406216
<class 'ir.StatList'> 140436271406272
Flattening 140436271406272 into 140436271728904
<class 'ir.LoadStat'> 140436271406664
<class 'ir.StatList'> 140436271406720
Flattening 140436271406720 into 140436271423784
<class 'ir.LoadStat'> 140436271406944
<class 'ir.StatList'> 140436271407000
Flattening 140436271407000 into 140436271423784
<class 'ir.BinStat'> 140436271423728
<class 'ir.StatList'> 140436271423784
Flattening 140436271423784 into 140436271424008
<class 'ir.StoreStat'> 140436271423952
<class 'ir.StatList'> 140436271424008
Flattening 140436271424008 into 140436271728904
<class 'ir.StatList'> 140436271728904
Not flattening 140436271728904 into 140436271729576 of type <class 'ir.Block'>
<class 'ir.DefinitionList'> 140436271728848
<class 'ir.Block'> 140436271729576
<class 'ir.FunctionDef'> 140436271729688
<class 'ir.DefinitionList'> 140436272016016
<class 'ir.Block'> 140436271830128

 <class 'ir.Block'> 140436271830128 {
                                                                      <<<<<----- BUG? MISSING PARENT
	body: 	<class 'ir.StatList'> 140436271729744 {
	parent = 140436271830128
		children:
		reg int t0 <- 1
		reg int t1 <- minus reg int t0
		global int x <- reg int t1
		read reg int t2
		global int x <- reg int t2
		reg int t8 <- global int x
		reg int t9 <- 100
		reg int32_t t10 <- reg int t8 gtr reg int t9
		branch on reg int32_t t10 to auto label label2
		reg int t7 <- global int x
		print reg int t7
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 140436271403976 {
		parent = 140436271729744
		}
		reg int t3 <- global int x
		reg int t5 <- minus reg int t3
		print reg int t5
		label1: <class 'ir.EmptyStat'> 140436271890616 {
		parent = 140436271729744
		}
		reg int t11 <- 1
		global int x <- reg int t11
		label3: <class 'ir.EmptyStat'> 140436271406104 {
		parent = 140436271729744
		}
		reg int t17 <- global int x
		reg int t18 <- 10
		reg int32_t t19 <- reg int t17 leq reg int t18
		branch on not reg int32_t t19 to auto label label4
		call  to auto function square
		reg int t12 <- global int x
		reg int t13 <- 1
		reg int32_t t14 <- reg int t12 plus reg int t13
		global int x <- reg int32_t t14
		reg int t16 <- global int squ
		print reg int t16
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 140436271831640 {
		parent = 140436271729744
		}
		reg int t20 <- 101
		global int x <- reg int t20
		label5: <class 'ir.EmptyStat'> 140436271425016 {
		parent = 140436271729744
		}
		reg int t44 <- global int x
		reg int t45 <- 105
		reg int32_t t46 <- reg int t44 leq reg int t45
		branch on not reg int32_t t46 to auto label label6
		reg int t21 <- global int x
		reg int t22 <- global int x
		reg int t23 <- 100
		reg int32_t t24 <- reg int t22 minus reg int t23
		reg int t25 <- 1
		reg int32_t t26 <- reg int32_t t24 times reg int t25
		reg &char t27 <- &(global char[5] arr)
		reg &char t28 <- reg &char t27 plus reg int32_t t26
		[reg &char t28] <- reg int t21
		reg int t29 <- global int x
		reg int t30 <- 100
		reg int32_t t31 <- reg int t29 minus reg int t30
		reg int t32 <- 1
		reg int32_t t34 <- reg int32_t t31 times reg int t32
		reg &char t39 <- &(global char[5] arr)
		reg &char t40 <- reg &char t39 plus reg int32_t t34
		reg char t38 <- [reg &char t40]
		print reg char t38
		reg int t41 <- global int x
		reg int t42 <- 1
		reg int32_t t43 <- reg int t41 plus reg int t42
		global int x <- reg int32_t t43
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 140436271797528 {
		parent = 140436271729744
		}
		reg int t47 <- 1
		global int x <- reg int t47
		reg int t48 <- 1
		global int y <- reg int t48
		label9: <class 'ir.EmptyStat'> 140436271427480 {
		parent = 140436271729744
		}
		reg int t88 <- global int x
		reg int t89 <- 5
		reg int32_t t90 <- reg int t88 leq reg int t89
		branch on not reg int32_t t90 to auto label label10
		label7: <class 'ir.EmptyStat'> 140436271882192 {
		parent = 140436271729744
		}
		reg int t85 <- global int y
		reg int t86 <- 5
		reg int32_t t87 <- reg int t85 leq reg int t86
		branch on not reg int32_t t87 to auto label label8
		reg int t49 <- global int x
		reg int t50 <- 1
		reg int32_t t52 <- reg int t49 times reg int t50
		reg &char t54 <- &(global char[5] arr)
		reg &char t55 <- reg &char t54 plus reg int32_t t52
		reg char t53 <- [reg &char t55]
		reg int t56 <- global int x
		reg int t57 <- 10
		reg int32_t t58 <- reg int t56 times reg int t57
		reg int t59 <- global int y
		reg int t60 <- 2
		reg int32_t t61 <- reg int t59 times reg int t60
		reg int32_t t62 <- reg int32_t t58 plus reg int32_t t61
		reg &short t63 <- &(global short[5, 5] multid)
		reg &short t64 <- reg &short t63 plus reg int32_t t62
		[reg &short t64] <- reg char t53
		reg int t65 <- global int x
		reg int t66 <- 10
		reg int32_t t67 <- reg int t65 times reg int t66
		reg int t68 <- global int y
		reg int t69 <- 2
		reg int32_t t70 <- reg int t68 times reg int t69
		reg int32_t t72 <- reg int32_t t67 plus reg int32_t t70
		reg &short t77 <- &(global short[5, 5] multid)
		reg &short t78 <- reg &short t77 plus reg int32_t t72
		reg short t76 <- [reg &short t78]
		print reg short t76
		reg int t79 <- global int x
		reg int t80 <- 1
		reg int32_t t81 <- reg int t79 plus reg int t80
		global int x <- reg int32_t t81
		reg int t82 <- global int y
		reg int t83 <- 1
		reg int32_t t84 <- reg int t82 plus reg int t83
		global int y <- reg int32_t t84
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 140436271403584 {
		parent = 140436271729744
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 140436271405264 {
		parent = 140436271729744
		}
	}
	global_symtab: 	SymbolTable:
	
	defs: 	<class 'ir.DefinitionList'> 140436272016016 {
	parent = 140436271830128
		children:
		<class 'ir.FunctionDef'> 140436271729688 {
		parent = 140436272016016
			body: 	<class 'ir.Block'> 140436271729576 {
			parent = 140436271729688
				body: 	<class 'ir.StatList'> 140436271728904 {
				parent = 140436271729576
					children:
					reg int t91 <- 1234
					auto int test <- reg int t91
					reg int t92 <- global int x
					reg int t93 <- global int x
					reg int32_t t94 <- reg int t92 times reg int t93
					global int squ <- reg int32_t t94
				}
				global_symtab: 	SymbolTable:
				global int x
				global int y
				global int squ
				global char[5] arr
				global short[5, 5] multid
				auto function square
				
				defs: 	<class 'ir.DefinitionList'> 140436271728848 {
				parent = 140436271729576
				}
			}
			symbol: 	auto function square
		}
	}
} 

navigating children of <class 'ir.StatList'> 140436271729744 117
successfully navigated attr  body  of <class 'ir.Block'> 140436271830128
navigating children of <class 'ir.DefinitionList'> 140436272016016 1
navigating children of <class 'ir.StatList'> 140436271728904 6
successfully navigated attr  body  of <class 'ir.Block'> 140436271729576
successfully navigated attr  defs  of <class 'ir.Block'> 140436271729576
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140436271729688
successfully navigated attr  defs  of <class 'ir.Block'> 140436271830128


DATALAYOUT



 <class 'ir.Block'> 140436271830128 {
                                                                      <<<<<----- BUG? MISSING PARENT
	body: 	<class 'ir.StatList'> 140436271729744 {
	parent = 140436271830128
		children:
		reg int t0 <- 1
		reg int t1 <- minus reg int t0
		global int x; _g_x: def byte 4 <- reg int t1
		read reg int t2
		global int x; _g_x: def byte 4 <- reg int t2
		reg int t8 <- global int x; _g_x: def byte 4
		reg int t9 <- 100
		reg int32_t t10 <- reg int t8 gtr reg int t9
		branch on reg int32_t t10 to auto label label2
		reg int t7 <- global int x; _g_x: def byte 4
		print reg int t7
		branch  to auto label label1
		label2: <class 'ir.EmptyStat'> 140436271403976 {
		parent = 140436271729744
		}
		reg int t3 <- global int x; _g_x: def byte 4
		reg int t5 <- minus reg int t3
		print reg int t5
		label1: <class 'ir.EmptyStat'> 140436271890616 {
		parent = 140436271729744
		}
		reg int t11 <- 1
		global int x; _g_x: def byte 4 <- reg int t11
		label3: <class 'ir.EmptyStat'> 140436271406104 {
		parent = 140436271729744
		}
		reg int t17 <- global int x; _g_x: def byte 4
		reg int t18 <- 10
		reg int32_t t19 <- reg int t17 leq reg int t18
		branch on not reg int32_t t19 to auto label label4
		call  to auto function square
		reg int t12 <- global int x; _g_x: def byte 4
		reg int t13 <- 1
		reg int32_t t14 <- reg int t12 plus reg int t13
		global int x; _g_x: def byte 4 <- reg int32_t t14
		reg int t16 <- global int squ; _g_squ: def byte 4
		print reg int t16
		branch  to auto label label3
		label4: <class 'ir.EmptyStat'> 140436271831640 {
		parent = 140436271729744
		}
		reg int t20 <- 101
		global int x; _g_x: def byte 4 <- reg int t20
		label5: <class 'ir.EmptyStat'> 140436271425016 {
		parent = 140436271729744
		}
		reg int t44 <- global int x; _g_x: def byte 4
		reg int t45 <- 105
		reg int32_t t46 <- reg int t44 leq reg int t45
		branch on not reg int32_t t46 to auto label label6
		reg int t21 <- global int x; _g_x: def byte 4
		reg int t22 <- global int x; _g_x: def byte 4
		reg int t23 <- 100
		reg int32_t t24 <- reg int t22 minus reg int t23
		reg int t25 <- 1
		reg int32_t t26 <- reg int32_t t24 times reg int t25
		reg &char t27 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t28 <- reg &char t27 plus reg int32_t t26
		[reg &char t28] <- reg int t21
		reg int t29 <- global int x; _g_x: def byte 4
		reg int t30 <- 100
		reg int32_t t31 <- reg int t29 minus reg int t30
		reg int t32 <- 1
		reg int32_t t34 <- reg int32_t t31 times reg int t32
		reg &char t39 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t40 <- reg &char t39 plus reg int32_t t34
		reg char t38 <- [reg &char t40]
		print reg char t38
		reg int t41 <- global int x; _g_x: def byte 4
		reg int t42 <- 1
		reg int32_t t43 <- reg int t41 plus reg int t42
		global int x; _g_x: def byte 4 <- reg int32_t t43
		branch  to auto label label5
		label6: <class 'ir.EmptyStat'> 140436271797528 {
		parent = 140436271729744
		}
		reg int t47 <- 1
		global int x; _g_x: def byte 4 <- reg int t47
		reg int t48 <- 1
		global int y; _g_y: def byte 4 <- reg int t48
		label9: <class 'ir.EmptyStat'> 140436271427480 {
		parent = 140436271729744
		}
		reg int t88 <- global int x; _g_x: def byte 4
		reg int t89 <- 5
		reg int32_t t90 <- reg int t88 leq reg int t89
		branch on not reg int32_t t90 to auto label label10
		label7: <class 'ir.EmptyStat'> 140436271882192 {
		parent = 140436271729744
		}
		reg int t85 <- global int y; _g_y: def byte 4
		reg int t86 <- 5
		reg int32_t t87 <- reg int t85 leq reg int t86
		branch on not reg int32_t t87 to auto label label8
		reg int t49 <- global int x; _g_x: def byte 4
		reg int t50 <- 1
		reg int32_t t52 <- reg int t49 times reg int t50
		reg &char t54 <- &(global char[5] arr; _g_arr: def byte 5)
		reg &char t55 <- reg &char t54 plus reg int32_t t52
		reg char t53 <- [reg &char t55]
		reg int t56 <- global int x; _g_x: def byte 4
		reg int t57 <- 10
		reg int32_t t58 <- reg int t56 times reg int t57
		reg int t59 <- global int y; _g_y: def byte 4
		reg int t60 <- 2
		reg int32_t t61 <- reg int t59 times reg int t60
		reg int32_t t62 <- reg int32_t t58 plus reg int32_t t61
		reg &short t63 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t64 <- reg &short t63 plus reg int32_t t62
		[reg &short t64] <- reg char t53
		reg int t65 <- global int x; _g_x: def byte 4
		reg int t66 <- 10
		reg int32_t t67 <- reg int t65 times reg int t66
		reg int t68 <- global int y; _g_y: def byte 4
		reg int t69 <- 2
		reg int32_t t70 <- reg int t68 times reg int t69
		reg int32_t t72 <- reg int32_t t67 plus reg int32_t t70
		reg &short t77 <- &(global short[5, 5] multid; _g_multid: def byte 50)
		reg &short t78 <- reg &short t77 plus reg int32_t t72
		reg short t76 <- [reg &short t78]
		print reg short t76
		reg int t79 <- global int x; _g_x: def byte 4
		reg int t80 <- 1
		reg int32_t t81 <- reg int t79 plus reg int t80
		global int x; _g_x: def byte 4 <- reg int32_t t81
		reg int t82 <- global int y; _g_y: def byte 4
		reg int t83 <- 1
		reg int32_t t84 <- reg int t82 plus reg int t83
		global int y; _g_y: def byte 4 <- reg int32_t t84
		branch  to auto label label7
		label8: <class 'ir.EmptyStat'> 140436271403584 {
		parent = 140436271729744
		}
		branch  to auto label label9
		label10: <class 'ir.EmptyStat'> 140436271405264 {
		parent = 140436271729744
		}
	}
	global_symtab: 	SymbolTable:
	
	defs: 	<class 'ir.DefinitionList'> 140436272016016 {
	parent = 140436271830128
		children:
		<class 'ir.FunctionDef'> 140436271729688 {
		parent = 140436272016016
			body: 	<class 'ir.Block'> 140436271729576 {
			parent = 140436271729688
				body: 	<class 'ir.StatList'> 140436271728904 {
				parent = 140436271729576
					children:
					reg int t91 <- 1234
					auto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t91
					reg int t92 <- global int x; _g_x: def byte 4
					reg int t93 <- global int x; _g_x: def byte 4
					reg int32_t t94 <- reg int t92 times reg int t93
					global int squ; _g_squ: def byte 4 <- reg int32_t t94
				}
				global_symtab: 	SymbolTable:
				global int x; _g_x: def byte 4
				global int y; _g_y: def byte 4
				global int squ; _g_squ: def byte 4
				global char[5] arr; _g_arr: def byte 5
				global short[5, 5] multid; _g_multid: def byte 50
				auto function square
				
				defs: 	<class 'ir.DefinitionList'> 140436271728848 {
				parent = 140436271729576
				}
			}
			symbol: 	auto function square
		}
	}
} 

navigating children of <class 'ir.StatList'> 140436271729744 117
successfully navigated attr  body  of <class 'ir.Block'> 140436271830128
navigating children of <class 'ir.DefinitionList'> 140436272016016 1
navigating children of <class 'ir.StatList'> 140436271728904 6
successfully navigated attr  body  of <class 'ir.Block'> 140436271729576
successfully navigated attr  defs  of <class 'ir.Block'> 140436271729576
successfully navigated attr  body  of <class 'ir.FunctionDef'> 140436271729688
successfully navigated attr  defs  of <class 'ir.Block'> 140436271830128
Liveness sets
140436271406776 [label="BB140436271406776{\nreg int t0 <- 1\nreg int t1 <- minus reg int t0\nglobal int x; _g_x: def byte 4 <- reg int t1\nread reg int t2\nglobal int x; _g_x: def byte 4 <- reg int t2\nreg int t8 <- global int x; _g_x: def byte 4\nreg int t9 <- 100\nreg int32_t t10 <- reg int t8 gtr reg int t9\nbranch on reg int32_t t10 to auto label label2}"];
140436271406776 -> 140436271406440 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];
140436271406776 -> 140436271403808 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];

gen: set()
kill: {reg int t1, reg int t2, reg int t0, reg int t8, reg int t9, reg int32_t t10, global int x; _g_x: def byte 4}
live_in: {global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140436271406440 [label="BB140436271406440{\nreg int t7 <- global int x; _g_x: def byte 4\nprint reg int t7\nbranch  to auto label label1}"];
140436271406440 -> 140436271403248 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t7}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140436271403808 [label="BB140436271403808{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 140436271403976 {
parent = 140436271729744
}\nreg int t3 <- global int x; _g_x: def byte 4\nreg int t5 <- minus reg int t3\nprint reg int t5}"];
140436271403808 -> 140436271403248 [label="{global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t3, reg int t5}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140436271403248 [label="BB140436271403248{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 140436271890616 {
parent = 140436271729744
}\nreg int t11 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t11}"];
140436271403248 -> 140436271404928 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];

gen: set()
kill: {global int x; _g_x: def byte 4, reg int t11}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140436271404928 [label="BB140436271404928{\n[auto label label3]\nlabel3: <class 'ir.EmptyStat'> 140436271406104 {
parent = 140436271729744
}\nreg int t17 <- global int x; _g_x: def byte 4\nreg int t18 <- 10\nreg int32_t t19 <- reg int t17 leq reg int t18\nbranch on not reg int32_t t19 to auto label label4}"];
140436271404928 -> 140436271405488 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];
140436271404928 -> 140436271405544 [style=dashed,label="{global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int32_t t19, reg int t17, reg int t18}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140436271405488 [label="BB140436271405488{\ncall  to auto function square\nreg int t12 <- global int x; _g_x: def byte 4\nreg int t13 <- 1\nreg int32_t t14 <- reg int t12 plus reg int t13\nglobal int x; _g_x: def byte 4 <- reg int32_t t14\nreg int t16 <- global int squ; _g_squ: def byte 4\nprint reg int t16\nbranch  to auto label label3}"];
140436271405488 -> 140436271404928 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];

gen: {global int x; _g_x: def byte 4, global int squ; _g_squ: def byte 4}
kill: {reg int t12, reg int t16, reg int t13, reg int32_t t14, global int x; _g_x: def byte 4}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
140436271405544 [label="BB140436271405544{\n[auto label label4]\nlabel4: <class 'ir.EmptyStat'> 140436271831640 {
parent = 140436271729744
}\nreg int t20 <- 101\nglobal int x; _g_x: def byte 4 <- reg int t20}"];
140436271405544 -> 140436271405712 [label="{global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];

gen: set()
kill: {global int x; _g_x: def byte 4, reg int t20}
live_in: {global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
140436271405712 [label="BB140436271405712{\n[auto label label5]\nlabel5: <class 'ir.EmptyStat'> 140436271425016 {
parent = 140436271729744
}\nreg int t44 <- global int x; _g_x: def byte 4\nreg int t45 <- 105\nreg int32_t t46 <- reg int t44 leq reg int t45\nbranch on not reg int32_t t46 to auto label label6}"];
140436271405712 -> 140436271405768 [label="{global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];
140436271405712 -> 140436271406160 [style=dashed,label="{global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t44, reg int t45, reg int32_t t46}
live_in: {global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
140436271405768 [label="BB140436271405768{\nreg int t21 <- global int x; _g_x: def byte 4\nreg int t22 <- global int x; _g_x: def byte 4\nreg int t23 <- 100\nreg int32_t t24 <- reg int t22 minus reg int t23\nreg int t25 <- 1\nreg int32_t t26 <- reg int32_t t24 times reg int t25\nreg &char t27 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t28 <- reg &char t27 plus reg int32_t t26\n[reg &char t28] <- reg int t21\nreg int t29 <- global int x; _g_x: def byte 4\nreg int t30 <- 100\nreg int32_t t31 <- reg int t29 minus reg int t30\nreg int t32 <- 1\nreg int32_t t34 <- reg int32_t t31 times reg int t32\nreg &char t39 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t40 <- reg &char t39 plus reg int32_t t34\nreg char t38 <- [reg &char t40]\nprint reg char t38\nreg int t41 <- global int x; _g_x: def byte 4\nreg int t42 <- 1\nreg int32_t t43 <- reg int t41 plus reg int t42\nglobal int x; _g_x: def byte 4 <- reg int32_t t43\nbranch  to auto label label5}"];
140436271405768 -> 140436271405712 [style=dashed,label="{global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];

gen: {global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
kill: {reg int t42, reg int32_t t31, reg int t23, reg &char t27, reg int t30, reg int32_t t34, reg &char t40, reg int t25, reg char t38, global int x; _g_x: def byte 4, reg int t21, reg &char t28, reg int t41, reg int32_t t26, reg int32_t t43, reg &char t39, reg int32_t t24, reg int t22, reg int t29, reg int t32}
live_in: {global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
140436271406160 [label="BB140436271406160{\n[auto label label6]\nlabel6: <class 'ir.EmptyStat'> 140436271797528 {
parent = 140436271729744
}\nreg int t47 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t47\nreg int t48 <- 1\nglobal int y; _g_y: def byte 4 <- reg int t48}"];
140436271406160 -> 140436271406328 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: set()
kill: {reg int t48, global int y; _g_y: def byte 4, reg int t47, global int x; _g_x: def byte 4}
live_in: {global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5}
140436271406328 [label="BB140436271406328{\n[auto label label9]\nlabel9: <class 'ir.EmptyStat'> 140436271427480 {
parent = 140436271729744
}\nreg int t88 <- global int x; _g_x: def byte 4\nreg int t89 <- 5\nreg int32_t t90 <- reg int t88 leq reg int t89\nbranch on not reg int32_t t90 to auto label label10}"];
140436271406328 -> 140436271406384 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140436271406328 -> 140436271404984 [style=dashed,label="set()"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t88, reg int t89, reg int32_t t90}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
140436271406384 [label="BB140436271406384{\n[auto label label7]\nlabel7: <class 'ir.EmptyStat'> 140436271882192 {
parent = 140436271729744
}\nreg int t85 <- global int y; _g_y: def byte 4\nreg int t86 <- 5\nreg int32_t t87 <- reg int t85 leq reg int t86\nbranch on not reg int32_t t87 to auto label label8}"];
140436271406384 -> 140436271894200 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140436271406384 -> 140436271423840 [style=dashed,label="{global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];

gen: {global int y; _g_y: def byte 4}
kill: {reg int t86, reg int t85, reg int32_t t87}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
140436271894200 [label="BB140436271894200{\nreg int t49 <- global int x; _g_x: def byte 4\nreg int t50 <- 1\nreg int32_t t52 <- reg int t49 times reg int t50\nreg &char t54 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t55 <- reg &char t54 plus reg int32_t t52\nreg char t53 <- [reg &char t55]\nreg int t56 <- global int x; _g_x: def byte 4\nreg int t57 <- 10\nreg int32_t t58 <- reg int t56 times reg int t57\nreg int t59 <- global int y; _g_y: def byte 4\nreg int t60 <- 2\nreg int32_t t61 <- reg int t59 times reg int t60\nreg int32_t t62 <- reg int32_t t58 plus reg int32_t t61\nreg &short t63 <- &(global short[5, 5] multid; _g_multid: def byte 50)\nreg &short t64 <- reg &short t63 plus reg int32_t t62\n[reg &short t64] <- reg char t53\nreg int t65 <- global int x; _g_x: def byte 4\nreg int t66 <- 10\nreg int32_t t67 <- reg int t65 times reg int t66\nreg int t68 <- global int y; _g_y: def byte 4\nreg int t69 <- 2\nreg int32_t t70 <- reg int t68 times reg int t69\nreg int32_t t72 <- reg int32_t t67 plus reg int32_t t70\nreg &short t77 <- &(global short[5, 5] multid; _g_multid: def byte 50)\nreg &short t78 <- reg &short t77 plus reg int32_t t72\nreg short t76 <- [reg &short t78]\nprint reg short t76\nreg int t79 <- global int x; _g_x: def byte 4\nreg int t80 <- 1\nreg int32_t t81 <- reg int t79 plus reg int t80\nglobal int x; _g_x: def byte 4 <- reg int32_t t81\nreg int t82 <- global int y; _g_y: def byte 4\nreg int t83 <- 1\nreg int32_t t84 <- reg int t82 plus reg int t83\nglobal int y; _g_y: def byte 4 <- reg int32_t t84\nbranch  to auto label label7}"];
140436271894200 -> 140436271406384 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
kill: {reg int32_t t81, reg int t65, reg int t82, reg int t79, reg &short t64, reg int t56, reg int t68, reg &char t55, reg int t80, reg int t66, reg int t59, reg int t69, reg short t76, reg &short t78, reg int t57, reg char t53, reg int t60, reg int32_t t67, reg int t49, reg int32_t t84, reg int32_t t61, reg int32_t t72, reg int32_t t70, global int x; _g_x: def byte 4, reg int32_t t58, reg &short t63, reg int32_t t52, reg int32_t t62, reg &short t77, global int y; _g_y: def byte 4, reg int t83, reg int t50, reg &char t54}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}
140436271423840 [label="BB140436271423840{\n[auto label label8]\nlabel8: <class 'ir.EmptyStat'> 140436271403584 {
parent = 140436271729744
}\nbranch  to auto label label9}"];
140436271423840 -> 140436271406328 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];

gen: set()
kill: set()
live_in: {global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
live_out: {global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
140436271404984 [label="BB140436271404984{\n[auto label label10]\nlabel10: <class 'ir.EmptyStat'> 140436271405264 {
parent = 140436271729744
}}"];
140436271404984 -> exit140436272925976 [label="set()"];

gen: set()
kill: set()
live_in: set()
live_out: set()
140436271423896 [label="BB140436271423896{\nreg int t91 <- 1234\nauto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t91\nreg int t92 <- global int x; _g_x: def byte 4\nreg int t93 <- global int x; _g_x: def byte 4\nreg int32_t t94 <- reg int t92 times reg int t93\nglobal int squ; _g_squ: def byte 4 <- reg int32_t t94}"];
140436271423896 -> exit140436271729688 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}"];

gen: {global int x; _g_x: def byte 4}
kill: {reg int t91, auto int test; _l_square_test: fp + (-4) [def byte 4], reg int32_t t94, reg int t92, global int squ; _g_squ: def byte 4, reg int t93}
live_in: {global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
live_out: {global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}

Instruction liveness
BASIC BLOCK:
140436271406776 [label="BB140436271406776{\nreg int t0 <- 1\nreg int t1 <- minus reg int t0\nglobal int x; _g_x: def byte 4 <- reg int t1\nread reg int t2\nglobal int x; _g_x: def byte 4 <- reg int t2\nreg int t8 <- global int x; _g_x: def byte 4\nreg int t9 <- 100\nreg int32_t t10 <- reg int t8 gtr reg int t9\nbranch on reg int32_t t10 to auto label label2}"];
140436271406776 -> 140436271406440 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];
140436271406776 -> 140436271403808 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];


inst=reg int t0 <- 1                                                                  live_in={global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                          live_out={reg int t0, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4}
inst=reg int t1 <- minus reg int t0                                                   live_in={reg int t0, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, global int squ; _g_squ: def byte 4}                                                              live_out={reg int t1, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int x; _g_x: def byte 4 <- reg int t1                                     live_in={reg int t1, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                              live_out={global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=read reg int t2                                                                  live_in={global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                          live_out={reg int t2, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int x; _g_x: def byte 4 <- reg int t2                                     live_in={reg int t2, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                              live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t8 <- global int x; _g_x: def byte 4                                     live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={reg int t8, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=reg int t9 <- 100                                                                live_in={reg int t8, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                              live_out={reg int t8, global short[5, 5] multid; _g_multid: def byte 50, reg int t9, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=reg int32_t t10 <- reg int t8 gtr reg int t9                                     live_in={reg int t8, global short[5, 5] multid; _g_multid: def byte 50, reg int t9, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                  live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t10, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=branch on reg int32_t t10 to auto label label2                                   live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t10, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                         live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271406440 [label="BB140436271406440{\nreg int t7 <- global int x; _g_x: def byte 4\nprint reg int t7\nbranch  to auto label label1}"];
140436271406440 -> 140436271403248 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];


inst=reg int t7 <- global int x; _g_x: def byte 4                                     live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={reg int t7, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=print reg int t7                                                                 live_in={reg int t7, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=branch  to auto label label1                                                     live_in={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                                                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
BASIC BLOCK:
140436271403808 [label="BB140436271403808{\n[auto label label2]\nlabel2: <class 'ir.EmptyStat'> 140436271403976 {
parent = 140436271729744
}\nreg int t3 <- global int x; _g_x: def byte 4\nreg int t5 <- minus reg int t3\nprint reg int t5}"];
140436271403808 -> 140436271403248 [label="{global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];


inst=label2: <class 'ir.EmptyStat'> 140436271403976 {
parent = 140436271729744
}      live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t3 <- global int x; _g_x: def byte 4                                     live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={reg int t3, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t5 <- minus reg int t3                                                   live_in={reg int t3, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                              live_out={reg int t5, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=print reg int t5                                                                 live_in={reg int t5, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                                                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
BASIC BLOCK:
140436271403248 [label="BB140436271403248{\n[auto label label1]\nlabel1: <class 'ir.EmptyStat'> 140436271890616 {
parent = 140436271729744
}\nreg int t11 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t11}"];
140436271403248 -> 140436271404928 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];


inst=label1: <class 'ir.EmptyStat'> 140436271890616 {
parent = 140436271729744
}      live_in={global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                          live_out={global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t11 <- 1                                                                 live_in={global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                          live_out={global int squ; _g_squ: def byte 4, reg int t11, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int x; _g_x: def byte 4 <- reg int t11                                    live_in={global int squ; _g_squ: def byte 4, reg int t11, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                             live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271404928 [label="BB140436271404928{\n[auto label label3]\nlabel3: <class 'ir.EmptyStat'> 140436271406104 {
parent = 140436271729744
}\nreg int t17 <- global int x; _g_x: def byte 4\nreg int t18 <- 10\nreg int32_t t19 <- reg int t17 leq reg int t18\nbranch on not reg int32_t t19 to auto label label4}"];
140436271404928 -> 140436271405488 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];
140436271404928 -> 140436271405544 [style=dashed,label="{global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];


inst=label3: <class 'ir.EmptyStat'> 140436271406104 {
parent = 140436271729744
}      live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t17 <- global int x; _g_x: def byte 4                                    live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t17, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=reg int t18 <- 10                                                                live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t17, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                             live_out={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t17, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4, reg int t18}
inst=reg int32_t t19 <- reg int t17 leq reg int t18                                   live_in={global int x; _g_x: def byte 4, global short[5, 5] multid; _g_multid: def byte 50, reg int t17, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4, reg int t18}                live_out={reg int32_t t19, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=branch on not reg int32_t t19 to auto label label4                               live_in={reg int32_t t19, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                         live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271405488 [label="BB140436271405488{\ncall  to auto function square\nreg int t12 <- global int x; _g_x: def byte 4\nreg int t13 <- 1\nreg int32_t t14 <- reg int t12 plus reg int t13\nglobal int x; _g_x: def byte 4 <- reg int32_t t14\nreg int t16 <- global int squ; _g_squ: def byte 4\nprint reg int t16\nbranch  to auto label label3}"];
140436271405488 -> 140436271404928 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}"];


inst=call  to auto function square                                                    live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t12 <- global int x; _g_x: def byte 4                                    live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={reg int t12, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t13 <- 1                                                                 live_in={reg int t12, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t12, reg int t13, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=reg int32_t t14 <- reg int t12 plus reg int t13                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t12, reg int t13, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                                                live_out={reg int32_t t14, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int x; _g_x: def byte 4 <- reg int32_t t14                                live_in={reg int32_t t14, global int squ; _g_squ: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                         live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t16 <- global int squ; _g_squ: def byte 4                                live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t16, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}
inst=print reg int t16                                                                live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t16, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}                             live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=branch  to auto label label3                                                     live_in={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                          live_out={global int squ; _g_squ: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271405544 [label="BB140436271405544{\n[auto label label4]\nlabel4: <class 'ir.EmptyStat'> 140436271831640 {
parent = 140436271729744
}\nreg int t20 <- 101\nglobal int x; _g_x: def byte 4 <- reg int t20}"];
140436271405544 -> 140436271405712 [label="{global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];


inst=label4: <class 'ir.EmptyStat'> 140436271831640 {
parent = 140436271729744
}      live_in={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                                                              live_out={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t20 <- 101                                                               live_in={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                                                              live_out={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg int t20}
inst=global int x; _g_x: def byte 4 <- reg int t20                                    live_in={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg int t20}                                                                                                 live_out={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271405712 [label="BB140436271405712{\n[auto label label5]\nlabel5: <class 'ir.EmptyStat'> 140436271425016 {
parent = 140436271729744
}\nreg int t44 <- global int x; _g_x: def byte 4\nreg int t45 <- 105\nreg int32_t t46 <- reg int t44 leq reg int t45\nbranch on not reg int32_t t46 to auto label label6}"];
140436271405712 -> 140436271405768 [label="{global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];
140436271405712 -> 140436271406160 [style=dashed,label="{global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];


inst=label5: <class 'ir.EmptyStat'> 140436271425016 {
parent = 140436271729744
}      live_in={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                              live_out={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t44 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                              live_out={reg int t44, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t45 <- 105                                                               live_in={reg int t44, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t44, reg int t45, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t46 <- reg int t44 leq reg int t45                                   live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t44, reg int t45, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                    live_out={reg int32_t t46, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=branch on not reg int32_t t46 to auto label label6                               live_in={reg int32_t t46, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                             live_out={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271405768 [label="BB140436271405768{\nreg int t21 <- global int x; _g_x: def byte 4\nreg int t22 <- global int x; _g_x: def byte 4\nreg int t23 <- 100\nreg int32_t t24 <- reg int t22 minus reg int t23\nreg int t25 <- 1\nreg int32_t t26 <- reg int32_t t24 times reg int t25\nreg &char t27 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t28 <- reg &char t27 plus reg int32_t t26\n[reg &char t28] <- reg int t21\nreg int t29 <- global int x; _g_x: def byte 4\nreg int t30 <- 100\nreg int32_t t31 <- reg int t29 minus reg int t30\nreg int t32 <- 1\nreg int32_t t34 <- reg int32_t t31 times reg int t32\nreg &char t39 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t40 <- reg &char t39 plus reg int32_t t34\nreg char t38 <- [reg &char t40]\nprint reg char t38\nreg int t41 <- global int x; _g_x: def byte 4\nreg int t42 <- 1\nreg int32_t t43 <- reg int t41 plus reg int t42\nglobal int x; _g_x: def byte 4 <- reg int32_t t43\nbranch  to auto label label5}"];
140436271405768 -> 140436271405712 [style=dashed,label="{global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];


inst=reg int t21 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                              live_out={global char[5] arr; _g_arr: def byte 5, global int x; _g_x: def byte 4, reg int t21, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t22 <- global int x; _g_x: def byte 4                                    live_in={global char[5] arr; _g_arr: def byte 5, global int x; _g_x: def byte 4, reg int t21, global short[5, 5] multid; _g_multid: def byte 50}                                                                 live_out={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg int t22, global int x; _g_x: def byte 4, reg int t21}
inst=reg int t23 <- 100                                                               live_in={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg int t22, global int x; _g_x: def byte 4, reg int t21}                                                    live_out={reg int t23, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg int t22, global int x; _g_x: def byte 4, reg int t21}
inst=reg int32_t t24 <- reg int t22 minus reg int t23                                 live_in={reg int t23, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg int t22, global int x; _g_x: def byte 4, reg int t21}                                       live_out={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t24, global int x; _g_x: def byte 4, reg int t21}
inst=reg int t25 <- 1                                                                 live_in={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t24, global int x; _g_x: def byte 4, reg int t21}                                                live_out={reg int32_t t24, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t25, global int x; _g_x: def byte 4, reg int t21}
inst=reg int32_t t26 <- reg int32_t t24 times reg int t25                             live_in={reg int32_t t24, global short[5, 5] multid; _g_multid: def byte 50, global char[5] arr; _g_arr: def byte 5, reg int t25, global int x; _g_x: def byte 4, reg int t21}                                   live_out={reg int32_t t26, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, reg int t21}
inst=reg &char t27 <- &(global char[5] arr; _g_arr: def byte 5)                       live_in={reg int32_t t26, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, reg int t21}                                                live_out={reg int32_t t26, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg &char t27, global int x; _g_x: def byte 4, reg int t21}
inst=reg &char t28 <- reg &char t27 plus reg int32_t t26                              live_in={reg int32_t t26, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50, reg &char t27, global int x; _g_x: def byte 4, reg int t21}                                 live_out={reg int t21, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t28}
inst=[reg &char t28] <- reg int t21                                                   live_in={reg int t21, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t28}                                                  live_out={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t29 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                              live_out={reg int t29, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t30 <- 100                                                               live_in={reg int t29, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                 live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int t30, reg int t29, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t31 <- reg int t29 minus reg int t30                                 live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int t30, reg int t29, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                    live_out={reg int32_t t31, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t32 <- 1                                                                 live_in={reg int32_t t31, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                             live_out={reg int32_t t31, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t32}
inst=reg int32_t t34 <- reg int32_t t31 times reg int t32                             live_in={reg int32_t t31, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t32}                                                live_out={reg int32_t t34, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg &char t39 <- &(global char[5] arr; _g_arr: def byte 5)                       live_in={reg int32_t t34, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                             live_out={reg &char t39, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t34, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &char t40 <- reg &char t39 plus reg int32_t t34                              live_in={reg &char t39, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t34, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                              live_out={reg &char t40, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg char t38 <- [reg &char t40]                                                  live_in={reg &char t40, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                               live_out={reg char t38, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=print reg char t38                                                               live_in={reg char t38, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                live_out={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t41 <- global int x; _g_x: def byte 4                                    live_in={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                              live_out={reg int t41, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t42 <- 1                                                                 live_in={reg int t41, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                                                 live_out={reg int t41, reg int t42, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int32_t t43 <- reg int t41 plus reg int t42                                  live_in={reg int t41, reg int t42, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                                    live_out={reg int32_t t43, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int x; _g_x: def byte 4 <- reg int32_t t43                                live_in={reg int32_t t43, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                                             live_out={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=branch  to auto label label5                                                     live_in={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                              live_out={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271406160 [label="BB140436271406160{\n[auto label label6]\nlabel6: <class 'ir.EmptyStat'> 140436271797528 {
parent = 140436271729744
}\nreg int t47 <- 1\nglobal int x; _g_x: def byte 4 <- reg int t47\nreg int t48 <- 1\nglobal int y; _g_y: def byte 4 <- reg int t48}"];
140436271406160 -> 140436271406328 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=label6: <class 'ir.EmptyStat'> 140436271797528 {
parent = 140436271729744
}      live_in={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                                                              live_out={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t47 <- 1                                                                 live_in={global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                                                              live_out={reg int t47, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int x; _g_x: def byte 4 <- reg int t47                                    live_in={reg int t47, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                                                 live_out={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t48 <- 1                                                                 live_in={global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                              live_out={reg int t48, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int y; _g_y: def byte 4 <- reg int t48                                    live_in={reg int t48, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                 live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271406328 [label="BB140436271406328{\n[auto label label9]\nlabel9: <class 'ir.EmptyStat'> 140436271427480 {
parent = 140436271729744
}\nreg int t88 <- global int x; _g_x: def byte 4\nreg int t89 <- 5\nreg int32_t t90 <- reg int t88 leq reg int t89\nbranch on not reg int32_t t90 to auto label label10}"];
140436271406328 -> 140436271406384 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140436271406328 -> 140436271404984 [style=dashed,label="set()"];


inst=label9: <class 'ir.EmptyStat'> 140436271427480 {
parent = 140436271729744
}      live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t88 <- global int x; _g_x: def byte 4                                    live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={reg int t88, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t89 <- 5                                                                 live_in={reg int t88, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                 live_out={reg int t88, reg int t89, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t90 <- reg int t88 leq reg int t89                                   live_in={reg int t88, reg int t89, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                    live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t90, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=branch on not reg int32_t t90 to auto label label10                              live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t90, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271406384 [label="BB140436271406384{\n[auto label label7]\nlabel7: <class 'ir.EmptyStat'> 140436271882192 {
parent = 140436271729744
}\nreg int t85 <- global int y; _g_y: def byte 4\nreg int t86 <- 5\nreg int32_t t87 <- reg int t85 leq reg int t86\nbranch on not reg int32_t t87 to auto label label8}"];
140436271406384 -> 140436271894200 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];
140436271406384 -> 140436271423840 [style=dashed,label="{global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}"];


inst=label7: <class 'ir.EmptyStat'> 140436271882192 {
parent = 140436271729744
}      live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t85 <- global int y; _g_y: def byte 4                                    live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={reg int t85, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t86 <- 5                                                                 live_in={reg int t85, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                 live_out={reg int t85, global short[5, 5] multid; _g_multid: def byte 50, reg int t86, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t87 <- reg int t85 leq reg int t86                                   live_in={reg int t85, global short[5, 5] multid; _g_multid: def byte 50, reg int t86, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                    live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t87, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=branch on not reg int32_t t87 to auto label label8                               live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t87, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271894200 [label="BB140436271894200{\nreg int t49 <- global int x; _g_x: def byte 4\nreg int t50 <- 1\nreg int32_t t52 <- reg int t49 times reg int t50\nreg &char t54 <- &(global char[5] arr; _g_arr: def byte 5)\nreg &char t55 <- reg &char t54 plus reg int32_t t52\nreg char t53 <- [reg &char t55]\nreg int t56 <- global int x; _g_x: def byte 4\nreg int t57 <- 10\nreg int32_t t58 <- reg int t56 times reg int t57\nreg int t59 <- global int y; _g_y: def byte 4\nreg int t60 <- 2\nreg int32_t t61 <- reg int t59 times reg int t60\nreg int32_t t62 <- reg int32_t t58 plus reg int32_t t61\nreg &short t63 <- &(global short[5, 5] multid; _g_multid: def byte 50)\nreg &short t64 <- reg &short t63 plus reg int32_t t62\n[reg &short t64] <- reg char t53\nreg int t65 <- global int x; _g_x: def byte 4\nreg int t66 <- 10\nreg int32_t t67 <- reg int t65 times reg int t66\nreg int t68 <- global int y; _g_y: def byte 4\nreg int t69 <- 2\nreg int32_t t70 <- reg int t68 times reg int t69\nreg int32_t t72 <- reg int32_t t67 plus reg int32_t t70\nreg &short t77 <- &(global short[5, 5] multid; _g_multid: def byte 50)\nreg &short t78 <- reg &short t77 plus reg int32_t t72\nreg short t76 <- [reg &short t78]\nprint reg short t76\nreg int t79 <- global int x; _g_x: def byte 4\nreg int t80 <- 1\nreg int32_t t81 <- reg int t79 plus reg int t80\nglobal int x; _g_x: def byte 4 <- reg int32_t t81\nreg int t82 <- global int y; _g_y: def byte 4\nreg int t83 <- 1\nreg int32_t t84 <- reg int t82 plus reg int t83\nglobal int y; _g_y: def byte 4 <- reg int32_t t84\nbranch  to auto label label7}"];
140436271894200 -> 140436271406384 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=reg int t49 <- global int x; _g_x: def byte 4                                    live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={reg int t49, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t50 <- 1                                                                 live_in={reg int t49, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                 live_out={reg int t50, reg int t49, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t52 <- reg int t49 times reg int t50                                 live_in={reg int t50, reg int t49, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                    live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t52, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &char t54 <- &(global char[5] arr; _g_arr: def byte 5)                       live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t52, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t52, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t54}
inst=reg &char t55 <- reg &char t54 plus reg int32_t t52                              live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t52, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t54}              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t55}
inst=reg char t53 <- [reg &char t55]                                                  live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &char t55}                               live_out={reg char t53, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t56 <- global int x; _g_x: def byte 4                                    live_in={reg char t53, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                live_out={reg char t53, global short[5, 5] multid; _g_multid: def byte 50, reg int t56, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t57 <- 10                                                                live_in={reg char t53, global short[5, 5] multid; _g_multid: def byte 50, reg int t56, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                   live_out={reg char t53, reg int t57, global short[5, 5] multid; _g_multid: def byte 50, reg int t56, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t58 <- reg int t56 times reg int t57                                 live_in={reg char t53, reg int t57, global short[5, 5] multid; _g_multid: def byte 50, reg int t56, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}      live_out={reg char t53, reg int32_t t58, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t59 <- global int y; _g_y: def byte 4                                    live_in={reg char t53, reg int32_t t58, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}               live_out={reg char t53, reg int32_t t58, reg int t59, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t60 <- 2                                                                 live_in={reg char t53, reg int32_t t58, reg int t59, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}  live_out={reg int t60, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t58, reg int t59, global int y; _g_y: def byte 4, reg char t53}
inst=reg int32_t t61 <- reg int t59 times reg int t60                                 live_in={reg int t60, global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int32_t t58, reg int t59, global int y; _g_y: def byte 4, reg char t53} live_out={reg char t53, reg int32_t t58, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t61, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t62 <- reg int32_t t58 plus reg int32_t t61                          live_in={reg char t53, reg int32_t t58, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t61, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5} live_out={reg char t53, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t62, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &short t63 <- &(global short[5, 5] multid; _g_multid: def byte 50)           live_in={reg char t53, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t62, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}               live_out={reg char t53, reg &short t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t62, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &short t64 <- reg &short t63 plus reg int32_t t62                            live_in={reg char t53, reg &short t63, global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t62, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5} live_out={reg char t53, global short[5, 5] multid; _g_multid: def byte 50, reg &short t64, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=[reg &short t64] <- reg char t53                                                 live_in={reg char t53, global short[5, 5] multid; _g_multid: def byte 50, reg &short t64, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t65 <- global int x; _g_x: def byte 4                                    live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={reg int t65, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t66 <- 10                                                                live_in={reg int t65, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                 live_out={reg int t65, reg int t66, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t67 <- reg int t65 times reg int t66                                 live_in={reg int t65, reg int t66, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                    live_out={reg int32_t t67, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t68 <- global int y; _g_y: def byte 4                                    live_in={reg int32_t t67, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={reg int32_t t67, global short[5, 5] multid; _g_multid: def byte 50, reg int t68, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t69 <- 2                                                                 live_in={reg int32_t t67, global short[5, 5] multid; _g_multid: def byte 50, reg int t68, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                live_out={reg int32_t t67, global short[5, 5] multid; _g_multid: def byte 50, reg int t68, reg int t69, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t70 <- reg int t68 times reg int t69                                 live_in={reg int32_t t67, global short[5, 5] multid; _g_multid: def byte 50, reg int t68, reg int t69, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}   live_out={reg int32_t t67, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, reg int32_t t70, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t72 <- reg int32_t t67 plus reg int32_t t70                          live_in={reg int32_t t67, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, reg int32_t t70, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}            live_out={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t72, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &short t77 <- &(global short[5, 5] multid; _g_multid: def byte 50)           live_in={global short[5, 5] multid; _g_multid: def byte 50, reg int32_t t72, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global short[5, 5] multid; _g_multid: def byte 50, reg &short t77, reg int32_t t72, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg &short t78 <- reg &short t77 plus reg int32_t t72                            live_in={global short[5, 5] multid; _g_multid: def byte 50, reg &short t77, reg int32_t t72, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}             live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &short t78}
inst=reg short t76 <- [reg &short t78]                                                live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg &short t78}                              live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, reg short t76, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=print reg short t76                                                              live_in={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, reg short t76, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                               live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t79 <- global int x; _g_x: def byte 4                                    live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={global int y; _g_y: def byte 4, reg int t79, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t80 <- 1                                                                 live_in={global int y; _g_y: def byte 4, reg int t79, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                                 live_out={reg int t79, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t80}
inst=reg int32_t t81 <- reg int t79 plus reg int t80                                  live_in={reg int t79, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t80}                                                    live_out={reg int32_t t81, global int y; _g_y: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int x; _g_x: def byte 4 <- reg int32_t t81                                live_in={reg int32_t t81, global int y; _g_y: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                             live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t82 <- global int y; _g_y: def byte 4                                    live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={global char[5] arr; _g_arr: def byte 5, global int x; _g_x: def byte 4, reg int t82, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t83 <- 1                                                                 live_in={global char[5] arr; _g_arr: def byte 5, global int x; _g_x: def byte 4, reg int t82, global short[5, 5] multid; _g_multid: def byte 50}                                                                 live_out={reg int t82, global short[5, 5] multid; _g_multid: def byte 50, reg int t83, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int32_t t84 <- reg int t82 plus reg int t83                                  live_in={reg int t82, global short[5, 5] multid; _g_multid: def byte 50, reg int t83, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                                    live_out={reg int32_t t84, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=global int y; _g_y: def byte 4 <- reg int32_t t84                                live_in={reg int32_t t84, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                                             live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=branch  to auto label label7                                                     live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271423840 [label="BB140436271423840{\n[auto label label8]\nlabel8: <class 'ir.EmptyStat'> 140436271403584 {
parent = 140436271729744
}\nbranch  to auto label label9}"];
140436271423840 -> 140436271406328 [style=dashed,label="{global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}"];


inst=label8: <class 'ir.EmptyStat'> 140436271403584 {
parent = 140436271729744
}      live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=branch  to auto label label9                                                     live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
BASIC BLOCK:
140436271404984 [label="BB140436271404984{\n[auto label label10]\nlabel10: <class 'ir.EmptyStat'> 140436271405264 {
parent = 140436271729744
}}"];
140436271404984 -> exit140436272925976 [label="set()"];


inst=label10: <class 'ir.EmptyStat'> 140436271405264 {
parent = 140436271729744
}     live_in=set()                                                                                                                                                                                                    live_out=set()                                                                           
BASIC BLOCK:
140436271423896 [label="BB140436271423896{\nreg int t91 <- 1234\nauto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t91\nreg int t92 <- global int x; _g_x: def byte 4\nreg int t93 <- global int x; _g_x: def byte 4\nreg int32_t t94 <- reg int t92 times reg int t93\nglobal int squ; _g_squ: def byte 4 <- reg int32_t t94}"];
140436271423896 -> exit140436271729688 [label="{global short[5, 5] multid; _g_multid: def byte 50, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int y; _g_y: def byte 4}"];


inst=reg int t91 <- 1234                                                              live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={reg int t91, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=auto int test; _l_square_test: fp + (-4) [def byte 4] <- reg int t91             live_in={reg int t91, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                 live_out={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}
inst=reg int t92 <- global int x; _g_x: def byte 4                                    live_in={global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global short[5, 5] multid; _g_multid: def byte 50}                                              live_out={reg int t92, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=reg int t93 <- global int x; _g_x: def byte 4                                    live_in={reg int t92, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                                 live_out={reg int t92, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t93}
inst=reg int32_t t94 <- reg int t92 times reg int t93                                 live_in={reg int t92, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, reg int t93}                    live_out={reg int32_t t94, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}
inst=global int squ; _g_squ: def byte 4 <- reg int32_t t94                            live_in={reg int32_t t94, global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5}                             live_out={global short[5, 5] multid; _g_multid: def byte 50, global int y; _g_y: def byte 4, global int x; _g_x: def byte 4, global char[5] arr; _g_arr: def byte 5, global int squ; _g_squ: def byte 4}


REGALLOC


LIVENESS INTERVALS:
[{'var': reg int t0, 'interv': range(0, 1)}, {'var': reg int t1, 'interv': range(1, 2)}, {'var': reg int t2, 'interv': range(3, 4)}, {'var': reg int t8, 'interv': range(5, 7)}, {'var': reg int t9, 'interv': range(6, 7)}, {'var': reg int32_t t10, 'interv': range(7, 8)}, {'var': reg int t7, 'interv': range(9, 10)}, {'var': reg int t3, 'interv': range(13, 14)}, {'var': reg int t5, 'interv': range(14, 15)}, {'var': reg int t11, 'interv': range(17, 18)}, {'var': reg int t17, 'interv': range(20, 22)}, {'var': reg int t18, 'interv': range(21, 22)}, {'var': reg int32_t t19, 'interv': range(22, 23)}, {'var': reg int t12, 'interv': range(25, 27)}, {'var': reg int t13, 'interv': range(26, 27)}, {'var': reg int32_t t14, 'interv': range(27, 28)}, {'var': reg int t16, 'interv': range(29, 30)}, {'var': reg int t20, 'interv': range(33, 34)}, {'var': reg int t44, 'interv': range(36, 38)}, {'var': reg int t45, 'interv': range(37, 38)}, {'var': reg int32_t t46, 'interv': range(38, 39)}, {'var': reg int t21, 'interv': range(40, 48)}, {'var': reg int t22, 'interv': range(41, 43)}, {'var': reg int t23, 'interv': range(42, 43)}, {'var': reg int32_t t24, 'interv': range(43, 45)}, {'var': reg int t25, 'interv': range(44, 45)}, {'var': reg int32_t t26, 'interv': range(45, 47)}, {'var': reg &char t27, 'interv': range(46, 47)}, {'var': reg &char t28, 'interv': range(47, 48)}, {'var': reg int t29, 'interv': range(49, 51)}, {'var': reg int t30, 'interv': range(50, 51)}, {'var': reg int32_t t31, 'interv': range(51, 53)}, {'var': reg int t32, 'interv': range(52, 53)}, {'var': reg int32_t t34, 'interv': range(53, 55)}, {'var': reg &char t39, 'interv': range(54, 55)}, {'var': reg &char t40, 'interv': range(55, 56)}, {'var': reg char t38, 'interv': range(56, 57)}, {'var': reg int t41, 'interv': range(58, 60)}, {'var': reg int t42, 'interv': range(59, 60)}, {'var': reg int32_t t43, 'interv': range(60, 61)}, {'var': reg int t47, 'interv': range(64, 65)}, {'var': reg int t48, 'interv': range(66, 67)}, {'var': reg int t88, 'interv': range(69, 71)}, {'var': reg int t89, 'interv': range(70, 71)}, {'var': reg int32_t t90, 'interv': range(71, 72)}, {'var': reg int t85, 'interv': range(74, 76)}, {'var': reg int t86, 'interv': range(75, 76)}, {'var': reg int32_t t87, 'interv': range(76, 77)}, {'var': reg int t49, 'interv': range(78, 80)}, {'var': reg int t50, 'interv': range(79, 80)}, {'var': reg int32_t t52, 'interv': range(80, 82)}, {'var': reg &char t54, 'interv': range(81, 82)}, {'var': reg &char t55, 'interv': range(82, 83)}, {'var': reg char t53, 'interv': range(83, 93)}, {'var': reg int t56, 'interv': range(84, 86)}, {'var': reg int t57, 'interv': range(85, 86)}, {'var': reg int32_t t58, 'interv': range(86, 90)}, {'var': reg int t59, 'interv': range(87, 89)}, {'var': reg int t60, 'interv': range(88, 89)}, {'var': reg int32_t t61, 'interv': range(89, 90)}, {'var': reg int32_t t62, 'interv': range(90, 92)}, {'var': reg &short t63, 'interv': range(91, 92)}, {'var': reg &short t64, 'interv': range(92, 93)}, {'var': reg int t65, 'interv': range(94, 96)}, {'var': reg int t66, 'interv': range(95, 96)}, {'var': reg int32_t t67, 'interv': range(96, 100)}, {'var': reg int t68, 'interv': range(97, 99)}, {'var': reg int t69, 'interv': range(98, 99)}, {'var': reg int32_t t70, 'interv': range(99, 100)}, {'var': reg int32_t t72, 'interv': range(100, 102)}, {'var': reg &short t77, 'interv': range(101, 102)}, {'var': reg &short t78, 'interv': range(102, 103)}, {'var': reg short t76, 'interv': range(103, 104)}, {'var': reg int t79, 'interv': range(105, 107)}, {'var': reg int t80, 'interv': range(106, 107)}, {'var': reg int32_t t81, 'interv': range(107, 108)}, {'var': reg int t82, 'interv': range(109, 111)}, {'var': reg int t83, 'interv': range(110, 111)}, {'var': reg int32_t t84, 'interv': range(111, 112)}, {'var': reg int t91, 'interv': range(117, 118)}, {'var': reg int t92, 'interv': range(119, 121)}, {'var': reg int t93, 'interv': range(120, 121)}, {'var': reg int32_t t94, 'interv': range(121, 122)}]
vartoreg = {reg int t0: 0, reg int t1: 1, reg int t2: 2, reg int t8: 3, reg int t9: 4, reg int32_t t10: 5, reg int t7: 6, reg int t3: 7, reg int t5: 8, reg int t11: 0, reg int t17: 1, reg int t18: 2, reg int32_t t19: 3, reg int t12: 4, reg int t13: 5, reg int32_t t14: 6, reg int t16: 7, reg int t20: 8, reg int t44: 0, reg int t45: 1, reg int32_t t46: 2, reg int t21: 3, reg int t22: 4, reg int t23: 5, reg int32_t t24: 6, reg int t25: 7, reg int32_t t26: 8, reg &char t27: 0, reg &char t28: 1, reg int t29: 2, reg int t30: 3, reg int32_t t31: 4, reg int t32: 5, reg int32_t t34: 6, reg &char t39: 7, reg &char t40: 8, reg char t38: 0, reg int t41: 1, reg int t42: 2, reg int32_t t43: 3, reg int t47: 4, reg int t48: 5, reg int t88: 6, reg int t89: 7, reg int32_t t90: 8, reg int t85: 0, reg int t86: 1, reg int32_t t87: 2, reg int t49: 3, reg int t50: 4, reg int32_t t52: 5, reg &char t54: 6, reg &char t55: 7, reg char t53: 8, reg int t56: 0, reg int t57: 1, reg int32_t t58: 2, reg int t59: 3, reg int t60: 4, reg int32_t t61: 5, reg int32_t t62: 6, reg &short t63: 7, reg &short t64: 0, reg int t65: 1, reg int t66: 2, reg int32_t t67: 3, reg int t68: 4, reg int t69: 5, reg int32_t t70: 6, reg int32_t t72: 7, reg &short t77: 8, reg &short t78: 0, reg short t76: 1, reg int t79: 2, reg int t80: 3, reg int32_t t81: 4, reg int t82: 5, reg int t83: 6, reg int32_t t84: 7, reg int t91: 8, reg int t92: 0, reg int t93: 1, reg int32_t t94: 2}


CODEGEN


	.text
	.arch armv6
	.syntax unified
@ block
	.comm _g_x, 4
	.comm _g_y, 4
	.comm _g_squ, 4
	.comm _g_arr, 5
	.comm _g_multid, 50
	.global __pl0_start
__pl0_start:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #0
	@ irnode 140436271729744 type <class 'ir.StatList'>
	mov r0, #1
	mvn r1, r0
	add r1, r1, #1
	ldr r12, .const0
	str r1, [r12]
	push {r0, r1, r3}
	bl __pl0_read
	mov r2, r0
	pop {r0, r1, r3}
	ldr r12, .const1
	str r2, [r12]
	ldr r12, .const2
	ldr r3, [r12]
	mov r4, #100
	cmp r3, r4
	movgt r5, #1
	movle r5, #0
	tst r5, r5
	bne label2
	ldr r12, .const3
	ldr r6, [r12]
	push {r0, r1, r2, r3}
	mov r0, r6
	bl __pl0_print
	pop {r0, r1, r2, r3}
	b label1
label2:
	@ emptystat
	ldr r12, .const4
	ldr r7, [r12]
	mvn r8, r7
	add r8, r8, #1
	push {r0, r1, r2, r3}
	mov r0, r8
	bl __pl0_print
	pop {r0, r1, r2, r3}
label1:
	@ emptystat
	mov r0, #1
	ldr r12, .const5
	str r0, [r12]
label3:
	@ emptystat
	ldr r12, .const6
	ldr r1, [r12]
	mov r2, #10
	cmp r1, r2
	movle r3, #1
	movgt r3, #0
	tst r3, r3
	beq label4
	push {r0, r1, r2, r3}
	bl square
	pop {r0, r1, r2, r3}
	ldr r12, .const7
	ldr r4, [r12]
	mov r5, #1
	add r6, r4, r5
	ldr r12, .const8
	str r6, [r12]
	ldr r12, .const9
	ldr r7, [r12]
	push {r0, r1, r2, r3}
	mov r0, r7
	bl __pl0_print
	pop {r0, r1, r2, r3}
	b label3
label4:
	@ emptystat
	mov r8, #101
	ldr r12, .const10
	str r8, [r12]
label5:
	@ emptystat
	ldr r12, .const11
	ldr r0, [r12]
	mov r1, #105
	cmp r0, r1
	movle r2, #1
	movgt r2, #0
	tst r2, r2
	beq label6
	ldr r12, .const12
	ldr r3, [r12]
	ldr r12, .const13
	ldr r4, [r12]
	mov r5, #100
	sub r6, r4, r5
	mov r7, #1
	mul r8, r6, r7
	ldr r0, .const14
	add r1, r0, r8
	strb r3, [r1]
	ldr r12, .const15
	ldr r2, [r12]
	mov r3, #100
	sub r4, r2, r3
	mov r5, #1
	mul r6, r4, r5
	ldr r7, .const16
	add r8, r7, r6
	ldrb r0, [r8]
	push {r0, r1, r2, r3}
	mov r0, r0
	bl __pl0_print
	pop {r0, r1, r2, r3}
	ldr r12, .const17
	ldr r1, [r12]
	mov r2, #1
	add r3, r1, r2
	ldr r12, .const18
	str r3, [r12]
	b label5
label6:
	@ emptystat
	mov r4, #1
	ldr r12, .const19
	str r4, [r12]
	mov r5, #1
	ldr r12, .const20
	str r5, [r12]
label9:
	@ emptystat
	ldr r12, .const21
	ldr r6, [r12]
	mov r7, #5
	cmp r6, r7
	movle r8, #1
	movgt r8, #0
	tst r8, r8
	beq label10
label7:
	@ emptystat
	ldr r12, .const22
	ldr r0, [r12]
	mov r1, #5
	cmp r0, r1
	movle r2, #1
	movgt r2, #0
	tst r2, r2
	beq label8
	ldr r12, .const23
	ldr r3, [r12]
	mov r4, #1
	mul r5, r3, r4
	ldr r6, .const24
	add r7, r6, r5
	ldrb r8, [r7]
	ldr r12, .const25
	ldr r0, [r12]
	mov r1, #10
	mul r2, r0, r1
	ldr r12, .const26
	ldr r3, [r12]
	mov r4, #2
	mul r5, r3, r4
	add r6, r2, r5
	ldr r7, .const27
	add r0, r7, r6
	strh r8, [r0]
	ldr r12, .const28
	ldr r1, [r12]
	mov r2, #10
	mul r3, r1, r2
	ldr r12, .const29
	ldr r4, [r12]
	mov r5, #2
	mul r6, r4, r5
	add r7, r3, r6
	ldr r8, .const30
	add r0, r8, r7
	ldrh r1, [r0]
	push {r0, r1, r2, r3}
	mov r0, r1
	bl __pl0_print
	pop {r0, r1, r2, r3}
	ldr r12, .const31
	ldr r2, [r12]
	mov r3, #1
	add r4, r2, r3
	ldr r12, .const32
	str r4, [r12]
	ldr r12, .const33
	ldr r5, [r12]
	mov r6, #1
	add r7, r5, r6
	ldr r12, .const34
	str r7, [r12]
	b label7
label8:
	@ emptystat
	b label9
label10:
	@ emptystat
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr
.const0:
	.word _g_x
.const1:
	.word _g_x
.const2:
	.word _g_x
.const3:
	.word _g_x
.const4:
	.word _g_x
.const5:
	.word _g_x
.const6:
	.word _g_x
.const7:
	.word _g_x
.const8:
	.word _g_x
.const9:
	.word _g_squ
.const10:
	.word _g_x
.const11:
	.word _g_x
.const12:
	.word _g_x
.const13:
	.word _g_x
.const14:
	.word _g_arr
.const15:
	.word _g_x
.const16:
	.word _g_arr
.const17:
	.word _g_x
.const18:
	.word _g_x
.const19:
	.word _g_x
.const20:
	.word _g_y
.const21:
	.word _g_x
.const22:
	.word _g_y
.const23:
	.word _g_x
.const24:
	.word _g_arr
.const25:
	.word _g_x
.const26:
	.word _g_y
.const27:
	.word _g_multid
.const28:
	.word _g_x
.const29:
	.word _g_y
.const30:
	.word _g_multid
.const31:
	.word _g_x
.const32:
	.word _g_x
.const33:
	.word _g_y
.const34:
	.word _g_y

square:
@ block
	.equ _l_square_test, -4
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	mov r11, sp
	sub sp, sp, #4
	@ irnode 140436271728904 type <class 'ir.StatList'>
	ldr r8, .const35
	str r8, [r11, #_l_square_test]
	ldr r12, .const36
	ldr r0, [r12]
	ldr r12, .const37
	ldr r1, [r12]
	mul r2, r0, r1
	ldr r12, .const38
	str r2, [r12]
	mov sp, r11
	pop {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	bx lr
.const35:
	.word 1234
.const36:
	.word _g_x
.const37:
	.word _g_x
.const38:
	.word _g_squ

